// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: tachiyomi.proto

package tachiyomi_backups

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// For readability?
type PreferenceValue int32

const (
	PreferenceValue_UNKNOWN          PreferenceValue = 0
	PreferenceValue_INT_VALUE        PreferenceValue = 2
	PreferenceValue_LONG_VALUE       PreferenceValue = 3
	PreferenceValue_FLOAT_VALUE      PreferenceValue = 4
	PreferenceValue_STRING_VALUE     PreferenceValue = 5
	PreferenceValue_BOOL_VALUE       PreferenceValue = 6
	PreferenceValue_STRING_SET_VALUE PreferenceValue = 7
)

// Enum value maps for PreferenceValue.
var (
	PreferenceValue_name = map[int32]string{
		0: "UNKNOWN",
		2: "INT_VALUE",
		3: "LONG_VALUE",
		4: "FLOAT_VALUE",
		5: "STRING_VALUE",
		6: "BOOL_VALUE",
		7: "STRING_SET_VALUE",
	}
	PreferenceValue_value = map[string]int32{
		"UNKNOWN":          0,
		"INT_VALUE":        2,
		"LONG_VALUE":       3,
		"FLOAT_VALUE":      4,
		"STRING_VALUE":     5,
		"BOOL_VALUE":       6,
		"STRING_SET_VALUE": 7,
	}
)

func (x PreferenceValue) Enum() *PreferenceValue {
	p := new(PreferenceValue)
	*p = x
	return p
}

func (x PreferenceValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreferenceValue) Descriptor() protoreflect.EnumDescriptor {
	return file_tachiyomi_proto_enumTypes[0].Descriptor()
}

func (PreferenceValue) Type() protoreflect.EnumType {
	return &file_tachiyomi_proto_enumTypes[0]
}

func (x PreferenceValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreferenceValue.Descriptor instead.
func (PreferenceValue) EnumDescriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{0}
}

type UpdateStrategy int32

const (
	UpdateStrategy_ALWAYS_UPDATE   UpdateStrategy = 0
	UpdateStrategy_ONLY_FETCH_ONCE UpdateStrategy = 1
)

// Enum value maps for UpdateStrategy.
var (
	UpdateStrategy_name = map[int32]string{
		0: "ALWAYS_UPDATE",
		1: "ONLY_FETCH_ONCE",
	}
	UpdateStrategy_value = map[string]int32{
		"ALWAYS_UPDATE":   0,
		"ONLY_FETCH_ONCE": 1,
	}
)

func (x UpdateStrategy) Enum() *UpdateStrategy {
	p := new(UpdateStrategy)
	*p = x
	return p
}

func (x UpdateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_tachiyomi_proto_enumTypes[1].Descriptor()
}

func (UpdateStrategy) Type() protoreflect.EnumType {
	return &file_tachiyomi_proto_enumTypes[1]
}

func (x UpdateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStrategy.Descriptor instead.
func (UpdateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{1}
}

type BackupCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	// Used in 1.x but not in 0.x
	UpdateInterval *int32 `protobuf:"varint,3,opt,name=updateInterval,proto3,oneof" json:"updateInterval,omitempty"`
	Flags          int32  `protobuf:"varint,100,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *BackupCategory) Reset() {
	*x = BackupCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupCategory) ProtoMessage() {}

func (x *BackupCategory) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupCategory.ProtoReflect.Descriptor instead.
func (*BackupCategory) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{0}
}

func (x *BackupCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackupCategory) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *BackupCategory) GetUpdateInterval() int32 {
	if x != nil && x.UpdateInterval != nil {
		return *x.UpdateInterval
	}
	return 0
}

func (x *BackupCategory) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type BackupChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Scanlator *string `protobuf:"bytes,3,opt,name=scanlator,proto3,oneof" json:"scanlator,omitempty"`
	Read      bool    `protobuf:"varint,4,opt,name=read,proto3" json:"read,omitempty"`
	Bookmark  bool    `protobuf:"varint,5,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	// Weird this ain't nullable in the current source code I have but it doesn't exist on my backup
	LastPageRead   *int64  `protobuf:"varint,6,opt,name=lastPageRead,proto3,oneof" json:"lastPageRead,omitempty"`
	DateFetch      int64   `protobuf:"varint,7,opt,name=dateFetch,proto3" json:"dateFetch,omitempty"`
	DateUpload     int64   `protobuf:"varint,8,opt,name=dateUpload,proto3" json:"dateUpload,omitempty"`
	ChapterNumber  float32 `protobuf:"fixed32,9,opt,name=chapterNumber,proto3" json:"chapterNumber,omitempty"`
	SourceOrder    int64   `protobuf:"varint,10,opt,name=sourceOrder,proto3" json:"sourceOrder,omitempty"`
	LastModifiedAt int64   `protobuf:"varint,11,opt,name=lastModifiedAt,proto3" json:"lastModifiedAt,omitempty"`
}

func (x *BackupChapter) Reset() {
	*x = BackupChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupChapter) ProtoMessage() {}

func (x *BackupChapter) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupChapter.ProtoReflect.Descriptor instead.
func (*BackupChapter) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{1}
}

func (x *BackupChapter) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BackupChapter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackupChapter) GetScanlator() string {
	if x != nil && x.Scanlator != nil {
		return *x.Scanlator
	}
	return ""
}

func (x *BackupChapter) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *BackupChapter) GetBookmark() bool {
	if x != nil {
		return x.Bookmark
	}
	return false
}

func (x *BackupChapter) GetLastPageRead() int64 {
	if x != nil && x.LastPageRead != nil {
		return *x.LastPageRead
	}
	return 0
}

func (x *BackupChapter) GetDateFetch() int64 {
	if x != nil {
		return x.DateFetch
	}
	return 0
}

func (x *BackupChapter) GetDateUpload() int64 {
	if x != nil {
		return x.DateUpload
	}
	return 0
}

func (x *BackupChapter) GetChapterNumber() float32 {
	if x != nil {
		return x.ChapterNumber
	}
	return 0
}

func (x *BackupChapter) GetSourceOrder() int64 {
	if x != nil {
		return x.SourceOrder
	}
	return 0
}

func (x *BackupChapter) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

type BrokenBackupHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	LastRead     int64  `protobuf:"varint,2,opt,name=lastRead,proto3" json:"lastRead,omitempty"`
	ReadDuration int64  `protobuf:"varint,3,opt,name=readDuration,proto3" json:"readDuration,omitempty"`
}

func (x *BrokenBackupHistory) Reset() {
	*x = BrokenBackupHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokenBackupHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokenBackupHistory) ProtoMessage() {}

func (x *BrokenBackupHistory) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokenBackupHistory.ProtoReflect.Descriptor instead.
func (*BrokenBackupHistory) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{2}
}

func (x *BrokenBackupHistory) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BrokenBackupHistory) GetLastRead() int64 {
	if x != nil {
		return x.LastRead
	}
	return 0
}

func (x *BrokenBackupHistory) GetReadDuration() int64 {
	if x != nil {
		return x.ReadDuration
	}
	return 0
}

type BackupHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	LastRead     int64  `protobuf:"varint,2,opt,name=lastRead,proto3" json:"lastRead,omitempty"`
	ReadDuration int64  `protobuf:"varint,3,opt,name=readDuration,proto3" json:"readDuration,omitempty"`
}

func (x *BackupHistory) Reset() {
	*x = BackupHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupHistory) ProtoMessage() {}

func (x *BackupHistory) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupHistory.ProtoReflect.Descriptor instead.
func (*BackupHistory) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{3}
}

func (x *BackupHistory) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BackupHistory) GetLastRead() int64 {
	if x != nil {
		return x.LastRead
	}
	return 0
}

func (x *BackupHistory) GetReadDuration() int64 {
	if x != nil {
		return x.ReadDuration
	}
	return 0
}

type BackupManga struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source       int64    `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Url          string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title        string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Artist       *string  `protobuf:"bytes,4,opt,name=artist,proto3,oneof" json:"artist,omitempty"`
	Author       *string  `protobuf:"bytes,5,opt,name=author,proto3,oneof" json:"author,omitempty"`
	Description  *string  `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Genre        []string `protobuf:"bytes,7,rep,name=genre,proto3" json:"genre,omitempty"`
	Status       int32    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	ThumbnailUrl *string  `protobuf:"bytes,9,opt,name=thumbnailUrl,proto3,oneof" json:"thumbnailUrl,omitempty"`
	// Values not used in 0.x but a 1.x value? (Better be optional then) {
	CustomCover *string           `protobuf:"bytes,10,opt,name=customCover,proto3,oneof" json:"customCover,omitempty"`
	LastUpdate  *int64            `protobuf:"varint,11,opt,name=lastUpdate,proto3,oneof" json:"lastUpdate,omitempty"`
	LastInit    *int64            `protobuf:"varint,12,opt,name=lastInit,proto3,oneof" json:"lastInit,omitempty"` // }
	DateAdded   int64             `protobuf:"varint,13,opt,name=dateAdded,proto3" json:"dateAdded,omitempty"`
	Viewer      int32             `protobuf:"varint,14,opt,name=viewer,proto3" json:"viewer,omitempty"`
	Flags       *int32            `protobuf:"varint,15,opt,name=flags,proto3,oneof" json:"flags,omitempty"` // Another 1,x value
	Chapters    []*BackupChapter  `protobuf:"bytes,16,rep,name=chapters,proto3" json:"chapters,omitempty"`
	Categories  []int64           `protobuf:"varint,17,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	Tracking    []*BackupTracking `protobuf:"bytes,18,rep,name=tracking,proto3" json:"tracking,omitempty"`
	// Another case of not being nullable but doesn't exist on my backup
	Favorite      *bool                  `protobuf:"varint,100,opt,name=favorite,proto3,oneof" json:"favorite,omitempty"`
	ChapterFlags  *int32                 `protobuf:"varint,101,opt,name=chapterFlags,proto3,oneof" json:"chapterFlags,omitempty"`
	BrokenHistory []*BrokenBackupHistory `protobuf:"bytes,102,rep,name=brokenHistory,proto3" json:"brokenHistory,omitempty"`
	ViewerFlags   *int32                 `protobuf:"varint,103,opt,name=viewer_flags,json=viewerFlags,proto3,oneof" json:"viewer_flags,omitempty"`
	History       []*BackupHistory       `protobuf:"bytes,104,rep,name=history,proto3" json:"history,omitempty"`
	// Another case of not being nullable but doesn't exist on my backup
	UpdateStrategy     UpdateStrategy `protobuf:"varint,105,opt,name=updateStrategy,proto3,enum=tachiyomi_backups.UpdateStrategy" json:"updateStrategy,omitempty"`
	LastModifiedAt     int64          `protobuf:"varint,106,opt,name=lastModifiedAt,proto3" json:"lastModifiedAt,omitempty"`
	FavoriteModifiedAt *int64         `protobuf:"varint,107,opt,name=favoriteModifiedAt,proto3,oneof" json:"favoriteModifiedAt,omitempty"`
}

func (x *BackupManga) Reset() {
	*x = BackupManga{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupManga) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupManga) ProtoMessage() {}

func (x *BackupManga) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupManga.ProtoReflect.Descriptor instead.
func (*BackupManga) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{4}
}

func (x *BackupManga) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *BackupManga) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BackupManga) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BackupManga) GetArtist() string {
	if x != nil && x.Artist != nil {
		return *x.Artist
	}
	return ""
}

func (x *BackupManga) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *BackupManga) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *BackupManga) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *BackupManga) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BackupManga) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *BackupManga) GetCustomCover() string {
	if x != nil && x.CustomCover != nil {
		return *x.CustomCover
	}
	return ""
}

func (x *BackupManga) GetLastUpdate() int64 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *BackupManga) GetLastInit() int64 {
	if x != nil && x.LastInit != nil {
		return *x.LastInit
	}
	return 0
}

func (x *BackupManga) GetDateAdded() int64 {
	if x != nil {
		return x.DateAdded
	}
	return 0
}

func (x *BackupManga) GetViewer() int32 {
	if x != nil {
		return x.Viewer
	}
	return 0
}

func (x *BackupManga) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *BackupManga) GetChapters() []*BackupChapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *BackupManga) GetCategories() []int64 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *BackupManga) GetTracking() []*BackupTracking {
	if x != nil {
		return x.Tracking
	}
	return nil
}

func (x *BackupManga) GetFavorite() bool {
	if x != nil && x.Favorite != nil {
		return *x.Favorite
	}
	return false
}

func (x *BackupManga) GetChapterFlags() int32 {
	if x != nil && x.ChapterFlags != nil {
		return *x.ChapterFlags
	}
	return 0
}

func (x *BackupManga) GetBrokenHistory() []*BrokenBackupHistory {
	if x != nil {
		return x.BrokenHistory
	}
	return nil
}

func (x *BackupManga) GetViewerFlags() int32 {
	if x != nil && x.ViewerFlags != nil {
		return *x.ViewerFlags
	}
	return 0
}

func (x *BackupManga) GetHistory() []*BackupHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *BackupManga) GetUpdateStrategy() UpdateStrategy {
	if x != nil {
		return x.UpdateStrategy
	}
	return UpdateStrategy_ALWAYS_UPDATE
}

func (x *BackupManga) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *BackupManga) GetFavoriteModifiedAt() int64 {
	if x != nil && x.FavoriteModifiedAt != nil {
		return *x.FavoriteModifiedAt
	}
	return 0
}

type BackupPreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Value:
	//
	//	*BackupPreference_IntValue
	//	*BackupPreference_LongValue
	//	*BackupPreference_FloatValue
	//	*BackupPreference_StringValue
	//	*BackupPreference_BoolValue
	//	*BackupPreference_StringSetValue
	Value isBackupPreference_Value `protobuf_oneof:"value"`
}

func (x *BackupPreference) Reset() {
	*x = BackupPreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPreference) ProtoMessage() {}

func (x *BackupPreference) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPreference.ProtoReflect.Descriptor instead.
func (*BackupPreference) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{5}
}

func (x *BackupPreference) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *BackupPreference) GetValue() isBackupPreference_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BackupPreference) GetIntValue() int32 {
	if x, ok := x.GetValue().(*BackupPreference_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *BackupPreference) GetLongValue() int64 {
	if x, ok := x.GetValue().(*BackupPreference_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *BackupPreference) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*BackupPreference_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *BackupPreference) GetStringValue() string {
	if x, ok := x.GetValue().(*BackupPreference_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *BackupPreference) GetBoolValue() bool {
	if x, ok := x.GetValue().(*BackupPreference_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *BackupPreference) GetStringSetValue() string {
	if x, ok := x.GetValue().(*BackupPreference_StringSetValue); ok {
		return x.StringSetValue
	}
	return ""
}

type isBackupPreference_Value interface {
	isBackupPreference_Value()
}

type BackupPreference_IntValue struct {
	IntValue int32 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type BackupPreference_LongValue struct {
	LongValue int64 `protobuf:"varint,3,opt,name=long_value,json=longValue,proto3,oneof"`
}

type BackupPreference_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,4,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type BackupPreference_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type BackupPreference_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type BackupPreference_StringSetValue struct {
	StringSetValue string `protobuf:"bytes,7,opt,name=string_set_value,json=stringSetValue,proto3,oneof"`
}

func (*BackupPreference_IntValue) isBackupPreference_Value() {}

func (*BackupPreference_LongValue) isBackupPreference_Value() {}

func (*BackupPreference_FloatValue) isBackupPreference_Value() {}

func (*BackupPreference_StringValue) isBackupPreference_Value() {}

func (*BackupPreference_BoolValue) isBackupPreference_Value() {}

func (*BackupPreference_StringSetValue) isBackupPreference_Value() {}

type BackupSourcePreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceKey string              `protobuf:"bytes,1,opt,name=source_key,json=sourceKey,proto3" json:"source_key,omitempty"`
	Prefs     []*BackupPreference `protobuf:"bytes,2,rep,name=prefs,proto3" json:"prefs,omitempty"`
}

func (x *BackupSourcePreferences) Reset() {
	*x = BackupSourcePreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupSourcePreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupSourcePreferences) ProtoMessage() {}

func (x *BackupSourcePreferences) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupSourcePreferences.ProtoReflect.Descriptor instead.
func (*BackupSourcePreferences) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{6}
}

func (x *BackupSourcePreferences) GetSourceKey() string {
	if x != nil {
		return x.SourceKey
	}
	return ""
}

func (x *BackupSourcePreferences) GetPrefs() []*BackupPreference {
	if x != nil {
		return x.Prefs
	}
	return nil
}

type BrokenBackupSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceId int64  `protobuf:"varint,2,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
}

func (x *BrokenBackupSource) Reset() {
	*x = BrokenBackupSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokenBackupSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokenBackupSource) ProtoMessage() {}

func (x *BrokenBackupSource) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokenBackupSource.ProtoReflect.Descriptor instead.
func (*BrokenBackupSource) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{7}
}

func (x *BrokenBackupSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrokenBackupSource) GetSourceId() int64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

type BackupSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceId int64  `protobuf:"varint,2,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
}

func (x *BackupSource) Reset() {
	*x = BackupSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupSource) ProtoMessage() {}

func (x *BackupSource) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupSource.ProtoReflect.Descriptor instead.
func (*BackupSource) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{8}
}

func (x *BackupSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackupSource) GetSourceId() int64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

type BackupTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncId              int32   `protobuf:"varint,1,opt,name=syncId,proto3" json:"syncId,omitempty"`
	LibraryId           int64   `protobuf:"varint,2,opt,name=libraryId,proto3" json:"libraryId,omitempty"`
	MediaIdInt          int32   `protobuf:"varint,3,opt,name=mediaIdInt,proto3" json:"mediaIdInt,omitempty"`
	TrackingUrl         string  `protobuf:"bytes,4,opt,name=trackingUrl,proto3" json:"trackingUrl,omitempty"`
	Title               string  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	LastChapterRead     float32 `protobuf:"fixed32,6,opt,name=lastChapterRead,proto3" json:"lastChapterRead,omitempty"`
	TotalChapters       int32   `protobuf:"varint,7,opt,name=totalChapters,proto3" json:"totalChapters,omitempty"`
	Score               float32 `protobuf:"fixed32,8,opt,name=score,proto3" json:"score,omitempty"`
	Status              int32   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	StartedReadingDate  int64   `protobuf:"varint,10,opt,name=startedReadingDate,proto3" json:"startedReadingDate,omitempty"`
	FinishedReadingDate int64   `protobuf:"varint,11,opt,name=finishedReadingDate,proto3" json:"finishedReadingDate,omitempty"`
	MediaId             int64   `protobuf:"varint,100,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
}

func (x *BackupTracking) Reset() {
	*x = BackupTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupTracking) ProtoMessage() {}

func (x *BackupTracking) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupTracking.ProtoReflect.Descriptor instead.
func (*BackupTracking) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{9}
}

func (x *BackupTracking) GetSyncId() int32 {
	if x != nil {
		return x.SyncId
	}
	return 0
}

func (x *BackupTracking) GetLibraryId() int64 {
	if x != nil {
		return x.LibraryId
	}
	return 0
}

func (x *BackupTracking) GetMediaIdInt() int32 {
	if x != nil {
		return x.MediaIdInt
	}
	return 0
}

func (x *BackupTracking) GetTrackingUrl() string {
	if x != nil {
		return x.TrackingUrl
	}
	return ""
}

func (x *BackupTracking) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BackupTracking) GetLastChapterRead() float32 {
	if x != nil {
		return x.LastChapterRead
	}
	return 0
}

func (x *BackupTracking) GetTotalChapters() int32 {
	if x != nil {
		return x.TotalChapters
	}
	return 0
}

func (x *BackupTracking) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BackupTracking) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BackupTracking) GetStartedReadingDate() int64 {
	if x != nil {
		return x.StartedReadingDate
	}
	return 0
}

func (x *BackupTracking) GetFinishedReadingDate() int64 {
	if x != nil {
		return x.FinishedReadingDate
	}
	return 0
}

func (x *BackupTracking) GetMediaId() int64 {
	if x != nil {
		return x.MediaId
	}
	return 0
}

type Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MangaBackup       []*BackupManga             `protobuf:"bytes,1,rep,name=mangaBackup,proto3" json:"mangaBackup,omitempty"`
	Categories        []*BackupCategory          `protobuf:"bytes,2,rep,name=categories,proto3" json:"categories,omitempty"`
	BrokenSources     []*BrokenBackupSource      `protobuf:"bytes,100,rep,name=brokenSources,proto3" json:"brokenSources,omitempty"`
	Sources           []*BackupSource            `protobuf:"bytes,101,rep,name=sources,proto3" json:"sources,omitempty"`
	Preferences       []*BackupPreference        `protobuf:"bytes,104,rep,name=preferences,proto3" json:"preferences,omitempty"`
	SourcePreferences []*BackupSourcePreferences `protobuf:"bytes,105,rep,name=sourcePreferences,proto3" json:"sourcePreferences,omitempty"`
}

func (x *Backup) Reset() {
	*x = Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachiyomi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_tachiyomi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_tachiyomi_proto_rawDescGZIP(), []int{10}
}

func (x *Backup) GetMangaBackup() []*BackupManga {
	if x != nil {
		return x.MangaBackup
	}
	return nil
}

func (x *Backup) GetCategories() []*BackupCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Backup) GetBrokenSources() []*BrokenBackupSource {
	if x != nil {
		return x.BrokenSources
	}
	return nil
}

func (x *Backup) GetSources() []*BackupSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Backup) GetPreferences() []*BackupPreference {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *Backup) GetSourcePreferences() []*BackupSourcePreferences {
	if x != nil {
		return x.SourcePreferences
	}
	return nil
}

var File_tachiyomi_proto protoreflect.FileDescriptor

var file_tachiyomi_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xfe, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x22, 0x67, 0x0a, 0x13, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x61, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x09, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d,
	0x61, 0x6e, 0x67, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x08, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x26, 0x0a, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x0b, 0x52, 0x12, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55,
	0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82,
	0x02, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x70, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x05, 0x70, 0x72, 0x65, 0x66, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3e,
	0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x98,
	0x03, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x49, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x22, 0xb6, 0x03, 0x0a, 0x06, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79,
	0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f,
	0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x69, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2a, 0x86, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x07, 0x2a, 0x38, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x4f,
	0x4e, 0x43, 0x45, 0x10, 0x01, 0x42, 0x14, 0x5a, 0x12, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f,
	0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tachiyomi_proto_rawDescOnce sync.Once
	file_tachiyomi_proto_rawDescData = file_tachiyomi_proto_rawDesc
)

func file_tachiyomi_proto_rawDescGZIP() []byte {
	file_tachiyomi_proto_rawDescOnce.Do(func() {
		file_tachiyomi_proto_rawDescData = protoimpl.X.CompressGZIP(file_tachiyomi_proto_rawDescData)
	})
	return file_tachiyomi_proto_rawDescData
}

var file_tachiyomi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tachiyomi_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tachiyomi_proto_goTypes = []interface{}{
	(PreferenceValue)(0),            // 0: tachiyomi_backups.PreferenceValue
	(UpdateStrategy)(0),             // 1: tachiyomi_backups.UpdateStrategy
	(*BackupCategory)(nil),          // 2: tachiyomi_backups.BackupCategory
	(*BackupChapter)(nil),           // 3: tachiyomi_backups.BackupChapter
	(*BrokenBackupHistory)(nil),     // 4: tachiyomi_backups.BrokenBackupHistory
	(*BackupHistory)(nil),           // 5: tachiyomi_backups.BackupHistory
	(*BackupManga)(nil),             // 6: tachiyomi_backups.BackupManga
	(*BackupPreference)(nil),        // 7: tachiyomi_backups.BackupPreference
	(*BackupSourcePreferences)(nil), // 8: tachiyomi_backups.BackupSourcePreferences
	(*BrokenBackupSource)(nil),      // 9: tachiyomi_backups.BrokenBackupSource
	(*BackupSource)(nil),            // 10: tachiyomi_backups.BackupSource
	(*BackupTracking)(nil),          // 11: tachiyomi_backups.BackupTracking
	(*Backup)(nil),                  // 12: tachiyomi_backups.Backup
}
var file_tachiyomi_proto_depIdxs = []int32{
	3,  // 0: tachiyomi_backups.BackupManga.chapters:type_name -> tachiyomi_backups.BackupChapter
	11, // 1: tachiyomi_backups.BackupManga.tracking:type_name -> tachiyomi_backups.BackupTracking
	4,  // 2: tachiyomi_backups.BackupManga.brokenHistory:type_name -> tachiyomi_backups.BrokenBackupHistory
	5,  // 3: tachiyomi_backups.BackupManga.history:type_name -> tachiyomi_backups.BackupHistory
	1,  // 4: tachiyomi_backups.BackupManga.updateStrategy:type_name -> tachiyomi_backups.UpdateStrategy
	7,  // 5: tachiyomi_backups.BackupSourcePreferences.prefs:type_name -> tachiyomi_backups.BackupPreference
	6,  // 6: tachiyomi_backups.Backup.mangaBackup:type_name -> tachiyomi_backups.BackupManga
	2,  // 7: tachiyomi_backups.Backup.categories:type_name -> tachiyomi_backups.BackupCategory
	9,  // 8: tachiyomi_backups.Backup.brokenSources:type_name -> tachiyomi_backups.BrokenBackupSource
	10, // 9: tachiyomi_backups.Backup.sources:type_name -> tachiyomi_backups.BackupSource
	7,  // 10: tachiyomi_backups.Backup.preferences:type_name -> tachiyomi_backups.BackupPreference
	8,  // 11: tachiyomi_backups.Backup.sourcePreferences:type_name -> tachiyomi_backups.BackupSourcePreferences
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_tachiyomi_proto_init() }
func file_tachiyomi_proto_init() {
	if File_tachiyomi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tachiyomi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokenBackupHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupManga); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupPreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupSourcePreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokenBackupSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachiyomi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tachiyomi_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tachiyomi_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_tachiyomi_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_tachiyomi_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*BackupPreference_IntValue)(nil),
		(*BackupPreference_LongValue)(nil),
		(*BackupPreference_FloatValue)(nil),
		(*BackupPreference_StringValue)(nil),
		(*BackupPreference_BoolValue)(nil),
		(*BackupPreference_StringSetValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tachiyomi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tachiyomi_proto_goTypes,
		DependencyIndexes: file_tachiyomi_proto_depIdxs,
		EnumInfos:         file_tachiyomi_proto_enumTypes,
		MessageInfos:      file_tachiyomi_proto_msgTypes,
	}.Build()
	File_tachiyomi_proto = out.File
	file_tachiyomi_proto_rawDesc = nil
	file_tachiyomi_proto_goTypes = nil
	file_tachiyomi_proto_depIdxs = nil
}
