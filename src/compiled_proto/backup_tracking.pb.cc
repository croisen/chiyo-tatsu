// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup_tracking.proto

#include "backup_tracking.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr BackupTracking::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : trackingurl_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        libraryid_{::int64_t{0}},
        syncid_{0},
        mediaidint_{0},
        lastchapterread_{0},
        totalchapters_{0},
        score_{0},
        status_{0},
        startedreadingdate_{::int64_t{0}},
        finishedreadingdate_{::int64_t{0}},
        mediaid_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BackupTracking::BackupTracking(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BackupTrackingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackupTrackingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackupTrackingDefaultTypeInternal() {}
  union {
    BackupTracking _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackupTrackingDefaultTypeInternal _BackupTracking_default_instance_;
static ::_pb::Metadata file_level_metadata_backup_5ftracking_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_backup_5ftracking_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_backup_5ftracking_2eproto = nullptr;
const ::uint32_t TableStruct_backup_5ftracking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.syncid_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.libraryid_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.mediaidint_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.trackingurl_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.lastchapterread_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.totalchapters_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.score_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.startedreadingdate_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.finishedreadingdate_),
    PROTOBUF_FIELD_OFFSET(::BackupTracking, _impl_.mediaid_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::BackupTracking)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_BackupTracking_default_instance_._instance,
};
const char descriptor_table_protodef_backup_5ftracking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025backup_tracking.proto\"\204\002\n\016BackupTracki"
    "ng\022\016\n\006syncId\030\001 \001(\005\022\021\n\tlibraryId\030\002 \001(\003\022\022\n"
    "\nmediaIdInt\030\003 \001(\005\022\023\n\013trackingUrl\030\004 \001(\t\022\r"
    "\n\005title\030\005 \001(\t\022\027\n\017lastChapterRead\030\006 \001(\002\022\025"
    "\n\rtotalChapters\030\007 \001(\005\022\r\n\005score\030\010 \001(\002\022\016\n\006"
    "status\030\t \001(\005\022\032\n\022startedReadingDate\030\n \001(\003"
    "\022\033\n\023finishedReadingDate\030\013 \001(\003\022\017\n\007mediaId"
    "\030d \001(\003b\006proto3"
};
static ::absl::once_flag descriptor_table_backup_5ftracking_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_backup_5ftracking_2eproto = {
    false,
    false,
    294,
    descriptor_table_protodef_backup_5ftracking_2eproto,
    "backup_tracking.proto",
    &descriptor_table_backup_5ftracking_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_backup_5ftracking_2eproto::offsets,
    file_level_metadata_backup_5ftracking_2eproto,
    file_level_enum_descriptors_backup_5ftracking_2eproto,
    file_level_service_descriptors_backup_5ftracking_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_backup_5ftracking_2eproto_getter() {
  return &descriptor_table_backup_5ftracking_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_backup_5ftracking_2eproto(&descriptor_table_backup_5ftracking_2eproto);
// ===================================================================

class BackupTracking::_Internal {
 public:
};

BackupTracking::BackupTracking(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:BackupTracking)
}
inline PROTOBUF_NDEBUG_INLINE BackupTracking::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : trackingurl_(arena, from.trackingurl_),
        title_(arena, from.title_),
        _cached_size_{0} {}

BackupTracking::BackupTracking(
    ::google::protobuf::Arena* arena,
    const BackupTracking& from)
    : ::google::protobuf::Message(arena) {
  BackupTracking* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, libraryid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, libraryid_),
           offsetof(Impl_, mediaid_) -
               offsetof(Impl_, libraryid_) +
               sizeof(Impl_::mediaid_));

  // @@protoc_insertion_point(copy_constructor:BackupTracking)
}
inline PROTOBUF_NDEBUG_INLINE BackupTracking::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : trackingurl_(arena),
        title_(arena),
        _cached_size_{0} {}

inline void BackupTracking::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, libraryid_),
           0,
           offsetof(Impl_, mediaid_) -
               offsetof(Impl_, libraryid_) +
               sizeof(Impl_::mediaid_));
}
BackupTracking::~BackupTracking() {
  // @@protoc_insertion_point(destructor:BackupTracking)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BackupTracking::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.trackingurl_.Destroy();
  _impl_.title_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BackupTracking::Clear() {
// @@protoc_insertion_point(message_clear_start:BackupTracking)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trackingurl_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.libraryid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.mediaid_) -
      reinterpret_cast<char*>(&_impl_.libraryid_)) + sizeof(_impl_.mediaid_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BackupTracking::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 47, 7> BackupTracking::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BackupTracking_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 syncId = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BackupTracking, _impl_.syncid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.syncid_)}},
    // int64 libraryId = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupTracking, _impl_.libraryid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.libraryid_)}},
    // int32 mediaIdInt = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BackupTracking, _impl_.mediaidint_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.mediaidint_)}},
    // string trackingUrl = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.trackingurl_)}},
    // string title = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.title_)}},
    // float lastChapterRead = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.lastchapterread_)}},
    // int32 totalChapters = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BackupTracking, _impl_.totalchapters_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.totalchapters_)}},
    // float score = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.score_)}},
    // int32 status = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BackupTracking, _impl_.status_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.status_)}},
    // int64 startedReadingDate = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupTracking, _impl_.startedreadingdate_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.startedreadingdate_)}},
    // int64 finishedReadingDate = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupTracking, _impl_.finishedreadingdate_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.finishedreadingdate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 11,
    65535, 65535
  }}, {{
    // int32 syncId = 1;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.syncid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 libraryId = 2;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.libraryid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 mediaIdInt = 3;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.mediaidint_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string trackingUrl = 4;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.trackingurl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title = 5;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.title_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float lastChapterRead = 6;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.lastchapterread_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 totalChapters = 7;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.totalchapters_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float score = 8;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 status = 9;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 startedReadingDate = 10;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.startedreadingdate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 finishedReadingDate = 11;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.finishedreadingdate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 mediaId = 100;
    {PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.mediaid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\16\0\0\0\13\5\0\0\0\0\0\0\0\0\0\0"
    "BackupTracking"
    "trackingUrl"
    "title"
  }},
};

::uint8_t* BackupTracking::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackupTracking)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 syncId = 1;
  if (this->_internal_syncid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_syncid(), target);
  }

  // int64 libraryId = 2;
  if (this->_internal_libraryid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_libraryid(), target);
  }

  // int32 mediaIdInt = 3;
  if (this->_internal_mediaidint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_mediaidint(), target);
  }

  // string trackingUrl = 4;
  if (!this->_internal_trackingurl().empty()) {
    const std::string& _s = this->_internal_trackingurl();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupTracking.trackingUrl");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string title = 5;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupTracking.title");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // float lastChapterRead = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_lastchapterread = this->_internal_lastchapterread();
  ::uint32_t raw_lastchapterread;
  memcpy(&raw_lastchapterread, &tmp_lastchapterread, sizeof(tmp_lastchapterread));
  if (raw_lastchapterread != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_lastchapterread(), target);
  }

  // int32 totalChapters = 7;
  if (this->_internal_totalchapters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_totalchapters(), target);
  }

  // float score = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_score(), target);
  }

  // int32 status = 9;
  if (this->_internal_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_status(), target);
  }

  // int64 startedReadingDate = 10;
  if (this->_internal_startedreadingdate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<10>(
            stream, this->_internal_startedreadingdate(), target);
  }

  // int64 finishedReadingDate = 11;
  if (this->_internal_finishedreadingdate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<11>(
            stream, this->_internal_finishedreadingdate(), target);
  }

  // int64 mediaId = 100;
  if (this->_internal_mediaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        100, this->_internal_mediaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackupTracking)
  return target;
}

::size_t BackupTracking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BackupTracking)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trackingUrl = 4;
  if (!this->_internal_trackingurl().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_trackingurl());
  }

  // string title = 5;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // int64 libraryId = 2;
  if (this->_internal_libraryid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_libraryid());
  }

  // int32 syncId = 1;
  if (this->_internal_syncid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_syncid());
  }

  // int32 mediaIdInt = 3;
  if (this->_internal_mediaidint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_mediaidint());
  }

  // float lastChapterRead = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_lastchapterread = this->_internal_lastchapterread();
  ::uint32_t raw_lastchapterread;
  memcpy(&raw_lastchapterread, &tmp_lastchapterread, sizeof(tmp_lastchapterread));
  if (raw_lastchapterread != 0) {
    total_size += 5;
  }

  // int32 totalChapters = 7;
  if (this->_internal_totalchapters() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_totalchapters());
  }

  // float score = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 5;
  }

  // int32 status = 9;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  // int64 startedReadingDate = 10;
  if (this->_internal_startedreadingdate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_startedreadingdate());
  }

  // int64 finishedReadingDate = 11;
  if (this->_internal_finishedreadingdate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_finishedreadingdate());
  }

  // int64 mediaId = 100;
  if (this->_internal_mediaid() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_mediaid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BackupTracking::_class_data_ = {
    BackupTracking::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BackupTracking::GetClassData() const {
  return &_class_data_;
}

void BackupTracking::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BackupTracking*>(&to_msg);
  auto& from = static_cast<const BackupTracking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BackupTracking)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trackingurl().empty()) {
    _this->_internal_set_trackingurl(from._internal_trackingurl());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_libraryid() != 0) {
    _this->_internal_set_libraryid(from._internal_libraryid());
  }
  if (from._internal_syncid() != 0) {
    _this->_internal_set_syncid(from._internal_syncid());
  }
  if (from._internal_mediaidint() != 0) {
    _this->_internal_set_mediaidint(from._internal_mediaidint());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_lastchapterread = from._internal_lastchapterread();
  ::uint32_t raw_lastchapterread;
  memcpy(&raw_lastchapterread, &tmp_lastchapterread, sizeof(tmp_lastchapterread));
  if (raw_lastchapterread != 0) {
    _this->_internal_set_lastchapterread(from._internal_lastchapterread());
  }
  if (from._internal_totalchapters() != 0) {
    _this->_internal_set_totalchapters(from._internal_totalchapters());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_startedreadingdate() != 0) {
    _this->_internal_set_startedreadingdate(from._internal_startedreadingdate());
  }
  if (from._internal_finishedreadingdate() != 0) {
    _this->_internal_set_finishedreadingdate(from._internal_finishedreadingdate());
  }
  if (from._internal_mediaid() != 0) {
    _this->_internal_set_mediaid(from._internal_mediaid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BackupTracking::CopyFrom(const BackupTracking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BackupTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BackupTracking::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BackupTracking::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BackupTracking::InternalSwap(BackupTracking* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trackingurl_, &other->_impl_.trackingurl_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.mediaid_)
      + sizeof(BackupTracking::_impl_.mediaid_)
      - PROTOBUF_FIELD_OFFSET(BackupTracking, _impl_.libraryid_)>(
          reinterpret_cast<char*>(&_impl_.libraryid_),
          reinterpret_cast<char*>(&other->_impl_.libraryid_));
}

::google::protobuf::Metadata BackupTracking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_5ftracking_2eproto_getter, &descriptor_table_backup_5ftracking_2eproto_once,
      file_level_metadata_backup_5ftracking_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
