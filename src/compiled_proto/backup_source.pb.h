// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: backup_source.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_backup_5fsource_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_backup_5fsource_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_backup_5fsource_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_backup_5fsource_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_backup_5fsource_2eproto;
class BackupSource;
struct BackupSourceDefaultTypeInternal;
extern BackupSourceDefaultTypeInternal _BackupSource_default_instance_;
class BrokenBackupSource;
struct BrokenBackupSourceDefaultTypeInternal;
extern BrokenBackupSourceDefaultTypeInternal _BrokenBackupSource_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class BrokenBackupSource final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:BrokenBackupSource) */ {
 public:
  inline BrokenBackupSource() : BrokenBackupSource(nullptr) {}
  ~BrokenBackupSource() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BrokenBackupSource(
      ::google::protobuf::internal::ConstantInitialized);

  inline BrokenBackupSource(const BrokenBackupSource& from) : BrokenBackupSource(nullptr, from) {}
  inline BrokenBackupSource(BrokenBackupSource&& from) noexcept
      : BrokenBackupSource(nullptr, std::move(from)) {}
  inline BrokenBackupSource& operator=(const BrokenBackupSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokenBackupSource& operator=(BrokenBackupSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokenBackupSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokenBackupSource* internal_default_instance() {
    return reinterpret_cast<const BrokenBackupSource*>(
        &_BrokenBackupSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BrokenBackupSource& a, BrokenBackupSource& b) { a.Swap(&b); }
  inline void Swap(BrokenBackupSource* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokenBackupSource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokenBackupSource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BrokenBackupSource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BrokenBackupSource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BrokenBackupSource& from) { BrokenBackupSource::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BrokenBackupSource* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "BrokenBackupSource"; }

 protected:
  explicit BrokenBackupSource(::google::protobuf::Arena* arena);
  BrokenBackupSource(::google::protobuf::Arena* arena, const BrokenBackupSource& from);
  BrokenBackupSource(::google::protobuf::Arena* arena, BrokenBackupSource&& from) noexcept
      : BrokenBackupSource(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 sourceId = 2;
  void clear_sourceid() ;
  ::int64_t sourceid() const;
  void set_sourceid(::int64_t value);

  private:
  ::int64_t _internal_sourceid() const;
  void _internal_set_sourceid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:BrokenBackupSource)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BrokenBackupSource_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BrokenBackupSource& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t sourceid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_backup_5fsource_2eproto;
};
// -------------------------------------------------------------------

class BackupSource final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:BackupSource) */ {
 public:
  inline BackupSource() : BackupSource(nullptr) {}
  ~BackupSource() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BackupSource(
      ::google::protobuf::internal::ConstantInitialized);

  inline BackupSource(const BackupSource& from) : BackupSource(nullptr, from) {}
  inline BackupSource(BackupSource&& from) noexcept
      : BackupSource(nullptr, std::move(from)) {}
  inline BackupSource& operator=(const BackupSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupSource& operator=(BackupSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupSource* internal_default_instance() {
    return reinterpret_cast<const BackupSource*>(
        &_BackupSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BackupSource& a, BackupSource& b) { a.Swap(&b); }
  inline void Swap(BackupSource* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupSource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupSource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BackupSource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BackupSource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BackupSource& from) { BackupSource::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BackupSource* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "BackupSource"; }

 protected:
  explicit BackupSource(::google::protobuf::Arena* arena);
  BackupSource(::google::protobuf::Arena* arena, const BackupSource& from);
  BackupSource(::google::protobuf::Arena* arena, BackupSource&& from) noexcept
      : BackupSource(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kSourceIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 sourceId = 2;
  void clear_sourceid() ;
  ::int64_t sourceid() const;
  void set_sourceid(::int64_t value);

  private:
  ::int64_t _internal_sourceid() const;
  void _internal_set_sourceid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:BackupSource)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      25, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BackupSource_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BackupSource& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t sourceid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_backup_5fsource_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BrokenBackupSource

// string name = 1;
inline void BrokenBackupSource::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BrokenBackupSource::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BrokenBackupSource.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BrokenBackupSource::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BrokenBackupSource.name)
}
inline std::string* BrokenBackupSource::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:BrokenBackupSource.name)
  return _s;
}
inline const std::string& BrokenBackupSource::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void BrokenBackupSource::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* BrokenBackupSource::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* BrokenBackupSource::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BrokenBackupSource.name)
  return _impl_.name_.Release();
}
inline void BrokenBackupSource::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BrokenBackupSource.name)
}

// int64 sourceId = 2;
inline void BrokenBackupSource::clear_sourceid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sourceid_ = ::int64_t{0};
}
inline ::int64_t BrokenBackupSource::sourceid() const {
  // @@protoc_insertion_point(field_get:BrokenBackupSource.sourceId)
  return _internal_sourceid();
}
inline void BrokenBackupSource::set_sourceid(::int64_t value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:BrokenBackupSource.sourceId)
}
inline ::int64_t BrokenBackupSource::_internal_sourceid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sourceid_;
}
inline void BrokenBackupSource::_internal_set_sourceid(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sourceid_ = value;
}

// -------------------------------------------------------------------

// BackupSource

// string name = 1;
inline void BackupSource::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BackupSource::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupSource.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupSource::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupSource.name)
}
inline std::string* BackupSource::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:BackupSource.name)
  return _s;
}
inline const std::string& BackupSource::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void BackupSource::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* BackupSource::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* BackupSource::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BackupSource.name)
  return _impl_.name_.Release();
}
inline void BackupSource::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupSource.name)
}

// int64 sourceId = 2;
inline void BackupSource::clear_sourceid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sourceid_ = ::int64_t{0};
}
inline ::int64_t BackupSource::sourceid() const {
  // @@protoc_insertion_point(field_get:BackupSource.sourceId)
  return _internal_sourceid();
}
inline void BackupSource::set_sourceid(::int64_t value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:BackupSource.sourceId)
}
inline ::int64_t BackupSource::_internal_sourceid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sourceid_;
}
inline void BackupSource::_internal_set_sourceid(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sourceid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_backup_5fsource_2eproto_2epb_2eh
