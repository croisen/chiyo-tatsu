// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: backup_manga.proto
// Protobuf C++ Version: 5.28.0-dev

#include "backup_manga.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr BackupManga::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        genre_{},
        chapters_{},
        categories_{},
        _categories_cached_byte_size_{0},
        tracking_{},
        brokenhistory_{},
        history_{},
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        artist_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        author_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        thumbnailurl_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        customcover_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_{::int64_t{0}},
        lastupdate_{::int64_t{0}},
        status_{0},
        viewer_{0},
        lastinit_{::int64_t{0}},
        dateadded_{::int64_t{0}},
        flags_{0},
        favorite_{false},
        chapterflags_{0},
        viewer_flags_{0},
        lastmodifiedat_{::int64_t{0}},
        favoritemodifiedat_{::int64_t{0}},
        updatestrategy_{static_cast< ::UpdateStrategy >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR BackupManga::BackupManga(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BackupMangaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackupMangaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackupMangaDefaultTypeInternal() {}
  union {
    BackupManga _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackupMangaDefaultTypeInternal _BackupManga_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_backup_5fmanga_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_backup_5fmanga_2eproto = nullptr;
const ::uint32_t
    TableStruct_backup_5fmanga_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.source_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.url_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.title_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.artist_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.author_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.genre_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.thumbnailurl_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.customcover_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.lastupdate_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.lastinit_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.dateadded_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.viewer_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.chapters_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.categories_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.tracking_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.favorite_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.chapterflags_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.brokenhistory_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.viewer_flags_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.history_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.updatestrategy_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.lastmodifiedat_),
        PROTOBUF_FIELD_OFFSET(::BackupManga, _impl_.favoritemodifiedat_),
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        ~0u,
        ~0u,
        3,
        4,
        5,
        6,
        ~0u,
        ~0u,
        7,
        ~0u,
        ~0u,
        ~0u,
        8,
        9,
        ~0u,
        10,
        ~0u,
        ~0u,
        ~0u,
        11,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 34, -1, sizeof(::BackupManga)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_BackupManga_default_instance_._instance,
};
const char descriptor_table_protodef_backup_5fmanga_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\022backup_manga.proto\032\024backup_chapter.pro"
    "to\032\024backup_history.proto\032\025backup_trackin"
    "g.proto\032\033manga_update_strategy.proto\"\301\006\n"
    "\013BackupManga\022\016\n\006source\030\001 \001(\003\022\013\n\003url\030\002 \001("
    "\t\022\r\n\005title\030\003 \001(\t\022\023\n\006artist\030\004 \001(\tH\000\210\001\001\022\023\n"
    "\006author\030\005 \001(\tH\001\210\001\001\022\030\n\013description\030\006 \001(\tH"
    "\002\210\001\001\022\r\n\005genre\030\007 \003(\t\022\016\n\006status\030\010 \001(\005\022\031\n\014t"
    "humbnailUrl\030\t \001(\tH\003\210\001\001\022\030\n\013customCover\030\n "
    "\001(\tH\004\210\001\001\022\027\n\nlastUpdate\030\013 \001(\003H\005\210\001\001\022\025\n\010las"
    "tInit\030\014 \001(\003H\006\210\001\001\022\021\n\tdateAdded\030\r \001(\003\022\016\n\006v"
    "iewer\030\016 \001(\005\022\022\n\005flags\030\017 \001(\005H\007\210\001\001\022 \n\010chapt"
    "ers\030\020 \003(\0132\016.BackupChapter\022\022\n\ncategories\030"
    "\021 \003(\003\022!\n\010tracking\030\022 \003(\0132\017.BackupTracking"
    "\022\025\n\010favorite\030d \001(\010H\010\210\001\001\022\031\n\014chapterFlags\030"
    "e \001(\005H\t\210\001\001\022+\n\rbrokenHistory\030f \003(\0132\024.Brok"
    "enBackupHistory\022\031\n\014viewer_flags\030g \001(\005H\n\210"
    "\001\001\022\037\n\007history\030h \003(\0132\016.BackupHistory\022\'\n\016u"
    "pdateStrategy\030i \001(\0162\017.UpdateStrategy\022\026\n\016"
    "lastModifiedAt\030j \001(\003\022\037\n\022favoriteModified"
    "At\030k \001(\003H\013\210\001\001B\t\n\007_artistB\t\n\007_authorB\016\n\014_"
    "descriptionB\017\n\r_thumbnailUrlB\016\n\014_customC"
    "overB\r\n\013_lastUpdateB\013\n\t_lastInitB\010\n\006_fla"
    "gsB\013\n\t_favoriteB\017\n\r_chapterFlagsB\017\n\r_vie"
    "wer_flagsB\025\n\023_favoriteModifiedAtb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_backup_5fmanga_2eproto_deps[4] =
    {
        &::descriptor_table_backup_5fchapter_2eproto,
        &::descriptor_table_backup_5fhistory_2eproto,
        &::descriptor_table_backup_5ftracking_2eproto,
        &::descriptor_table_manga_5fupdate_5fstrategy_2eproto,
};
static ::absl::once_flag descriptor_table_backup_5fmanga_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_backup_5fmanga_2eproto = {
    false,
    false,
    960,
    descriptor_table_protodef_backup_5fmanga_2eproto,
    "backup_manga.proto",
    &descriptor_table_backup_5fmanga_2eproto_once,
    descriptor_table_backup_5fmanga_2eproto_deps,
    4,
    1,
    schemas,
    file_default_instances,
    TableStruct_backup_5fmanga_2eproto::offsets,
    file_level_enum_descriptors_backup_5fmanga_2eproto,
    file_level_service_descriptors_backup_5fmanga_2eproto,
};
// ===================================================================

class BackupManga::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BackupManga>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BackupManga, _impl_._has_bits_);
};

void BackupManga::clear_chapters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chapters_.Clear();
}
void BackupManga::clear_tracking() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_.Clear();
}
void BackupManga::clear_brokenhistory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brokenhistory_.Clear();
}
void BackupManga::clear_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.history_.Clear();
}
BackupManga::BackupManga(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:BackupManga)
}
inline PROTOBUF_NDEBUG_INLINE BackupManga::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::BackupManga& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        genre_{visibility, arena, from.genre_},
        chapters_{visibility, arena, from.chapters_},
        categories_{visibility, arena, from.categories_},
        _categories_cached_byte_size_{0},
        tracking_{visibility, arena, from.tracking_},
        brokenhistory_{visibility, arena, from.brokenhistory_},
        history_{visibility, arena, from.history_},
        url_(arena, from.url_),
        title_(arena, from.title_),
        artist_(arena, from.artist_),
        author_(arena, from.author_),
        description_(arena, from.description_),
        thumbnailurl_(arena, from.thumbnailurl_),
        customcover_(arena, from.customcover_) {}

BackupManga::BackupManga(
    ::google::protobuf::Arena* arena,
    const BackupManga& from)
    : ::google::protobuf::Message(arena) {
  BackupManga* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, source_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, source_),
           offsetof(Impl_, updatestrategy_) -
               offsetof(Impl_, source_) +
               sizeof(Impl_::updatestrategy_));

  // @@protoc_insertion_point(copy_constructor:BackupManga)
}
inline PROTOBUF_NDEBUG_INLINE BackupManga::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        genre_{visibility, arena},
        chapters_{visibility, arena},
        categories_{visibility, arena},
        _categories_cached_byte_size_{0},
        tracking_{visibility, arena},
        brokenhistory_{visibility, arena},
        history_{visibility, arena},
        url_(arena),
        title_(arena),
        artist_(arena),
        author_(arena),
        description_(arena),
        thumbnailurl_(arena),
        customcover_(arena) {}

inline void BackupManga::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, source_),
           0,
           offsetof(Impl_, updatestrategy_) -
               offsetof(Impl_, source_) +
               sizeof(Impl_::updatestrategy_));
}
BackupManga::~BackupManga() {
  // @@protoc_insertion_point(destructor:BackupManga)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BackupManga::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.url_.Destroy();
  _impl_.title_.Destroy();
  _impl_.artist_.Destroy();
  _impl_.author_.Destroy();
  _impl_.description_.Destroy();
  _impl_.thumbnailurl_.Destroy();
  _impl_.customcover_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
BackupManga::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(BackupManga, _impl_._cached_size_),
              false,
          },
          &BackupManga::MergeImpl,
          &BackupManga::kDescriptorMethods,
          &descriptor_table_backup_5fmanga_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 26, 4, 103, 7> BackupManga::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BackupManga, _impl_._has_bits_),
    0, // no _extensions_
    107, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    26,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BackupManga_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::BackupManga>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 source = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupManga, _impl_.source_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.source_)}},
    // string url = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.url_)}},
    // string title = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.title_)}},
    // optional string artist = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.artist_)}},
    // optional string author = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.author_)}},
    // optional string description = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.description_)}},
    // repeated string genre = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.genre_)}},
    // int32 status = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BackupManga, _impl_.status_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.status_)}},
    // optional string thumbnailUrl = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 3, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.thumbnailurl_)}},
    // optional string customCover = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 4, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.customcover_)}},
    // optional int64 lastUpdate = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupManga, _impl_.lastupdate_), 5>(),
     {88, 5, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.lastupdate_)}},
    // optional int64 lastInit = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupManga, _impl_.lastinit_), 6>(),
     {96, 6, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.lastinit_)}},
    // int64 dateAdded = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupManga, _impl_.dateadded_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.dateadded_)}},
    // int32 viewer = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BackupManga, _impl_.viewer_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.viewer_)}},
    // optional int32 flags = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BackupManga, _impl_.flags_), 7>(),
     {120, 7, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.flags_)}},
    // repeated .BackupChapter chapters = 16;
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.chapters_)}},
    // repeated int64 categories = 17;
    {::_pbi::TcParser::FastV64P2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.categories_)}},
    // repeated .BackupTracking tracking = 18;
    {::_pbi::TcParser::FastMtR2,
     {402, 63, 1, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.tracking_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool favorite = 100;
    {::_pbi::TcParser::FastV8S2,
     {1696, 8, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.favorite_)}},
    // optional int32 chapterFlags = 101;
    {::_pbi::TcParser::FastV32S2,
     {1704, 9, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.chapterflags_)}},
    // repeated .BrokenBackupHistory brokenHistory = 102;
    {::_pbi::TcParser::FastMtR2,
     {1714, 63, 2, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.brokenhistory_)}},
    // optional int32 viewer_flags = 103;
    {::_pbi::TcParser::FastV32S2,
     {1720, 10, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.viewer_flags_)}},
    // repeated .BackupHistory history = 104;
    {::_pbi::TcParser::FastMtR2,
     {1730, 63, 3, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.history_)}},
    // .UpdateStrategy updateStrategy = 105;
    {::_pbi::TcParser::FastV32S2,
     {1736, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.updatestrategy_)}},
    // int64 lastModifiedAt = 106;
    {::_pbi::TcParser::FastV64S2,
     {1744, 63, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.lastmodifiedat_)}},
    // optional int64 favoriteModifiedAt = 107;
    {::_pbi::TcParser::FastV64S2,
     {1752, 11, 0, PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.favoritemodifiedat_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65280, 18,
    65535, 65535
  }}, {{
    // int64 source = 1;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.source_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string url = 2;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title = 3;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string artist = 4;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.artist_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string author = 5;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.author_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string description = 6;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.description_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string genre = 7;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.genre_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 status = 8;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional string thumbnailUrl = 9;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.thumbnailurl_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string customCover = 10;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.customcover_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int64 lastUpdate = 11;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.lastupdate_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 lastInit = 12;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.lastinit_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 dateAdded = 13;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.dateadded_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 viewer = 14;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.viewer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional int32 flags = 15;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.flags_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .BackupChapter chapters = 16;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.chapters_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int64 categories = 17;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.categories_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated .BackupTracking tracking = 18;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.tracking_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool favorite = 100;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.favorite_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 chapterFlags = 101;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.chapterflags_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .BrokenBackupHistory brokenHistory = 102;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.brokenhistory_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 viewer_flags = 103;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.viewer_flags_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .BackupHistory history = 104;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.history_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .UpdateStrategy updateStrategy = 105;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.updatestrategy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 lastModifiedAt = 106;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.lastmodifiedat_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // optional int64 favoriteModifiedAt = 107;
    {PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.favoritemodifiedat_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::BackupChapter>()},
    {::_pbi::TcParser::GetTable<::BackupTracking>()},
    {::_pbi::TcParser::GetTable<::BrokenBackupHistory>()},
    {::_pbi::TcParser::GetTable<::BackupHistory>()},
  }}, {{
    "\13\0\3\5\6\6\13\5\0\14\13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "BackupManga"
    "url"
    "title"
    "artist"
    "author"
    "description"
    "genre"
    "thumbnailUrl"
    "customCover"
  }},
};

PROTOBUF_NOINLINE void BackupManga::Clear() {
// @@protoc_insertion_point(message_clear_start:BackupManga)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.genre_.Clear();
  _impl_.chapters_.Clear();
  _impl_.categories_.Clear();
  _impl_.tracking_.Clear();
  _impl_.brokenhistory_.Clear();
  _impl_.history_.Clear();
  _impl_.url_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.artist_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.author_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.thumbnailurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.customcover_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.source_ = ::int64_t{0};
  _impl_.lastupdate_ = ::int64_t{0};
  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.viewer_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.viewer_));
  _impl_.lastinit_ = ::int64_t{0};
  _impl_.dateadded_ = ::int64_t{0};
  _impl_.flags_ = 0;
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.favorite_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.viewer_flags_) -
        reinterpret_cast<char*>(&_impl_.favorite_)) + sizeof(_impl_.viewer_flags_));
  }
  _impl_.lastmodifiedat_ = ::int64_t{0};
  _impl_.favoritemodifiedat_ = ::int64_t{0};
  _impl_.updatestrategy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* BackupManga::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackupManga)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 source = 1;
  if (this->_internal_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_source(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    const std::string& _s = this->_internal_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupManga.url");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupManga.title");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string artist = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_artist();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupManga.artist");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string author = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_author();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupManga.author");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupManga.description");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // repeated string genre = 7;
  for (int i = 0, n = this->_internal_genre_size(); i < n; ++i) {
    const auto& s = this->_internal_genre().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupManga.genre");
    target = stream->WriteString(7, s, target);
  }

  // int32 status = 8;
  if (this->_internal_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_status(), target);
  }

  // optional string thumbnailUrl = 9;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_thumbnailurl();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupManga.thumbnailUrl");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string customCover = 10;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_customcover();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupManga.customCover");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional int64 lastUpdate = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<11>(
            stream, this->_internal_lastupdate(), target);
  }

  // optional int64 lastInit = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<12>(
            stream, this->_internal_lastinit(), target);
  }

  // int64 dateAdded = 13;
  if (this->_internal_dateadded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<13>(
            stream, this->_internal_dateadded(), target);
  }

  // int32 viewer = 14;
  if (this->_internal_viewer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<14>(
            stream, this->_internal_viewer(), target);
  }

  // optional int32 flags = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_flags(), target);
  }

  // repeated .BackupChapter chapters = 16;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_chapters_size());
       i < n; i++) {
    const auto& repfield = this->_internal_chapters().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            16, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated int64 categories = 17;
  {
    int byte_size = _impl_._categories_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          17, _internal_categories(), byte_size, target);
    }
  }

  // repeated .BackupTracking tracking = 18;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_tracking_size());
       i < n; i++) {
    const auto& repfield = this->_internal_tracking().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            18, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional bool favorite = 100;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        100, this->_internal_favorite(), target);
  }

  // optional int32 chapterFlags = 101;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        101, this->_internal_chapterflags(), target);
  }

  // repeated .BrokenBackupHistory brokenHistory = 102;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_brokenhistory_size());
       i < n; i++) {
    const auto& repfield = this->_internal_brokenhistory().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            102, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional int32 viewer_flags = 103;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        103, this->_internal_viewer_flags(), target);
  }

  // repeated .BackupHistory history = 104;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_history_size());
       i < n; i++) {
    const auto& repfield = this->_internal_history().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            104, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // .UpdateStrategy updateStrategy = 105;
  if (this->_internal_updatestrategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        105, this->_internal_updatestrategy(), target);
  }

  // int64 lastModifiedAt = 106;
  if (this->_internal_lastmodifiedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        106, this->_internal_lastmodifiedat(), target);
  }

  // optional int64 favoriteModifiedAt = 107;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        107, this->_internal_favoritemodifiedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackupManga)
  return target;
}

::size_t BackupManga::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:BackupManga)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(
      reinterpret_cast<const void*>(this));
   {
    // repeated string genre = 7;
     {
      total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_genre().size());
      for (int i = 0, n = _internal_genre().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            _internal_genre().Get(i));
      }
    }
    // repeated .BackupChapter chapters = 16;
     {
      total_size += 2UL * this->_internal_chapters_size();
      for (const auto& msg : this->_internal_chapters()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated int64 categories = 17;
     {
      std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
          this->_internal_categories())
      ;
      _impl_._categories_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
      std::size_t tag_size = data_size == 0
          ? 0
          : 2 + ::_pbi::WireFormatLite::Int32Size(
                              static_cast<int32_t>(data_size))
      ;
      total_size += tag_size + data_size;
    }
    // repeated .BackupTracking tracking = 18;
     {
      total_size += 2UL * this->_internal_tracking_size();
      for (const auto& msg : this->_internal_tracking()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .BrokenBackupHistory brokenHistory = 102;
     {
      total_size += 2UL * this->_internal_brokenhistory_size();
      for (const auto& msg : this->_internal_brokenhistory()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .BackupHistory history = 104;
     {
      total_size += 2UL * this->_internal_history_size();
      for (const auto& msg : this->_internal_history()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // string url = 2;
    if (!this->_internal_url().empty()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_url());
    }
    // string title = 3;
    if (!this->_internal_title().empty()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_title());
    }
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string artist = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_artist());
    }
    // optional string author = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_author());
    }
    // optional string description = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_description());
    }
    // optional string thumbnailUrl = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_thumbnailurl());
    }
    // optional string customCover = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_customcover());
    }
  }
   {
    // int64 source = 1;
    if (this->_internal_source() != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_source());
    }
  }
   {
    // optional int64 lastUpdate = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_lastupdate());
    }
  }
   {
    // int32 status = 8;
    if (this->_internal_status() != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_status());
    }
    // int32 viewer = 14;
    if (this->_internal_viewer() != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_viewer());
    }
  }
   {
    // optional int64 lastInit = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_lastinit());
    }
  }
   {
    // int64 dateAdded = 13;
    if (this->_internal_dateadded() != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_dateadded());
    }
  }
   {
    // optional int32 flags = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_flags());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool favorite = 100;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3;
    }
    // optional int32 chapterFlags = 101;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_chapterflags());
    }
    // optional int32 viewer_flags = 103;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_viewer_flags());
    }
  }
   {
    // int64 lastModifiedAt = 106;
    if (this->_internal_lastmodifiedat() != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_lastmodifiedat());
    }
  }
   {
    // optional int64 favoriteModifiedAt = 107;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_favoritemodifiedat());
    }
  }
   {
    // .UpdateStrategy updateStrategy = 105;
    if (this->_internal_updatestrategy() != 0) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_updatestrategy());
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void BackupManga::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BackupManga*>(&to_msg);
  auto& from = static_cast<const BackupManga&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BackupManga)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_genre()->MergeFrom(from._internal_genre());
  _this->_internal_mutable_chapters()->MergeFrom(
      from._internal_chapters());
  _this->_internal_mutable_categories()->MergeFrom(from._internal_categories());
  _this->_internal_mutable_tracking()->MergeFrom(
      from._internal_tracking());
  _this->_internal_mutable_brokenhistory()->MergeFrom(
      from._internal_brokenhistory());
  _this->_internal_mutable_history()->MergeFrom(
      from._internal_history());
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_artist(from._internal_artist());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_author(from._internal_author());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_thumbnailurl(from._internal_thumbnailurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_customcover(from._internal_customcover());
    }
  }
  if (from._internal_source() != 0) {
    _this->_impl_.source_ = from._impl_.source_;
  }
  if (cached_has_bits & 0x00000020u) {
    _this->_impl_.lastupdate_ = from._impl_.lastupdate_;
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  if (from._internal_viewer() != 0) {
    _this->_impl_.viewer_ = from._impl_.viewer_;
  }
  if (cached_has_bits & 0x00000040u) {
    _this->_impl_.lastinit_ = from._impl_.lastinit_;
  }
  if (from._internal_dateadded() != 0) {
    _this->_impl_.dateadded_ = from._impl_.dateadded_;
  }
  if (cached_has_bits & 0x00000080u) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.favorite_ = from._impl_.favorite_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.chapterflags_ = from._impl_.chapterflags_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.viewer_flags_ = from._impl_.viewer_flags_;
    }
  }
  if (from._internal_lastmodifiedat() != 0) {
    _this->_impl_.lastmodifiedat_ = from._impl_.lastmodifiedat_;
  }
  if (cached_has_bits & 0x00000800u) {
    _this->_impl_.favoritemodifiedat_ = from._impl_.favoritemodifiedat_;
  }
  if (from._internal_updatestrategy() != 0) {
    _this->_impl_.updatestrategy_ = from._impl_.updatestrategy_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BackupManga::CopyFrom(const BackupManga& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BackupManga)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BackupManga::InternalSwap(BackupManga* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.genre_.InternalSwap(&other->_impl_.genre_);
  _impl_.chapters_.InternalSwap(&other->_impl_.chapters_);
  _impl_.categories_.InternalSwap(&other->_impl_.categories_);
  _impl_.tracking_.InternalSwap(&other->_impl_.tracking_);
  _impl_.brokenhistory_.InternalSwap(&other->_impl_.brokenhistory_);
  _impl_.history_.InternalSwap(&other->_impl_.history_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.artist_, &other->_impl_.artist_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.author_, &other->_impl_.author_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.thumbnailurl_, &other->_impl_.thumbnailurl_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customcover_, &other->_impl_.customcover_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.updatestrategy_)
      + sizeof(BackupManga::_impl_.updatestrategy_)
      - PROTOBUF_FIELD_OFFSET(BackupManga, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::google::protobuf::Metadata BackupManga::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_backup_5fmanga_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
