// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup_chapter.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_backup_5fchapter_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_backup_5fchapter_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_backup_5fchapter_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_backup_5fchapter_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_backup_5fchapter_2eproto;
class BackupChapter;
struct BackupChapterDefaultTypeInternal;
extern BackupChapterDefaultTypeInternal _BackupChapter_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class BackupChapter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BackupChapter) */ {
 public:
  inline BackupChapter() : BackupChapter(nullptr) {}
  ~BackupChapter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BackupChapter(::google::protobuf::internal::ConstantInitialized);

  inline BackupChapter(const BackupChapter& from)
      : BackupChapter(nullptr, from) {}
  BackupChapter(BackupChapter&& from) noexcept
    : BackupChapter() {
    *this = ::std::move(from);
  }

  inline BackupChapter& operator=(const BackupChapter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupChapter& operator=(BackupChapter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupChapter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupChapter* internal_default_instance() {
    return reinterpret_cast<const BackupChapter*>(
               &_BackupChapter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BackupChapter& a, BackupChapter& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupChapter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupChapter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupChapter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackupChapter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BackupChapter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BackupChapter& from) {
    BackupChapter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BackupChapter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "BackupChapter";
  }
  protected:
  explicit BackupChapter(::google::protobuf::Arena* arena);
  BackupChapter(::google::protobuf::Arena* arena, const BackupChapter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kNameFieldNumber = 2,
    kScanlatorFieldNumber = 3,
    kLastPageReadFieldNumber = 6,
    kReadFieldNumber = 4,
    kBookmarkFieldNumber = 5,
    kChapterNumberFieldNumber = 9,
    kDateFetchFieldNumber = 7,
    kDateUploadFieldNumber = 8,
    kSourceOrderFieldNumber = 10,
    kLastModifiedAtFieldNumber = 11,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string scanlator = 3;
  bool has_scanlator() const;
  void clear_scanlator() ;
  const std::string& scanlator() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scanlator(Arg_&& arg, Args_... args);
  std::string* mutable_scanlator();
  PROTOBUF_NODISCARD std::string* release_scanlator();
  void set_allocated_scanlator(std::string* value);

  private:
  const std::string& _internal_scanlator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scanlator(
      const std::string& value);
  std::string* _internal_mutable_scanlator();

  public:
  // optional int64 lastPageRead = 6;
  bool has_lastpageread() const;
  void clear_lastpageread() ;
  ::int64_t lastpageread() const;
  void set_lastpageread(::int64_t value);

  private:
  ::int64_t _internal_lastpageread() const;
  void _internal_set_lastpageread(::int64_t value);

  public:
  // bool read = 4;
  void clear_read() ;
  bool read() const;
  void set_read(bool value);

  private:
  bool _internal_read() const;
  void _internal_set_read(bool value);

  public:
  // bool bookmark = 5;
  void clear_bookmark() ;
  bool bookmark() const;
  void set_bookmark(bool value);

  private:
  bool _internal_bookmark() const;
  void _internal_set_bookmark(bool value);

  public:
  // float chapterNumber = 9;
  void clear_chapternumber() ;
  float chapternumber() const;
  void set_chapternumber(float value);

  private:
  float _internal_chapternumber() const;
  void _internal_set_chapternumber(float value);

  public:
  // int64 dateFetch = 7;
  void clear_datefetch() ;
  ::int64_t datefetch() const;
  void set_datefetch(::int64_t value);

  private:
  ::int64_t _internal_datefetch() const;
  void _internal_set_datefetch(::int64_t value);

  public:
  // int64 dateUpload = 8;
  void clear_dateupload() ;
  ::int64_t dateupload() const;
  void set_dateupload(::int64_t value);

  private:
  ::int64_t _internal_dateupload() const;
  void _internal_set_dateupload(::int64_t value);

  public:
  // int64 sourceOrder = 10;
  void clear_sourceorder() ;
  ::int64_t sourceorder() const;
  void set_sourceorder(::int64_t value);

  private:
  ::int64_t _internal_sourceorder() const;
  void _internal_set_sourceorder(::int64_t value);

  public:
  // int64 lastModifiedAt = 11;
  void clear_lastmodifiedat() ;
  ::int64_t lastmodifiedat() const;
  void set_lastmodifiedat(::int64_t value);

  private:
  ::int64_t _internal_lastmodifiedat() const;
  void _internal_set_lastmodifiedat(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:BackupChapter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr scanlator_;
    ::int64_t lastpageread_;
    bool read_;
    bool bookmark_;
    float chapternumber_;
    ::int64_t datefetch_;
    ::int64_t dateupload_;
    ::int64_t sourceorder_;
    ::int64_t lastmodifiedat_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_backup_5fchapter_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BackupChapter

// string url = 1;
inline void BackupChapter::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& BackupChapter::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupChapter.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupChapter::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupChapter.url)
}
inline std::string* BackupChapter::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:BackupChapter.url)
  return _s;
}
inline const std::string& BackupChapter::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void BackupChapter::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* BackupChapter::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* BackupChapter::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupChapter.url)
  return _impl_.url_.Release();
}
inline void BackupChapter::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupChapter.url)
}

// string name = 2;
inline void BackupChapter::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BackupChapter::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupChapter.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupChapter::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupChapter.name)
}
inline std::string* BackupChapter::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:BackupChapter.name)
  return _s;
}
inline const std::string& BackupChapter::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void BackupChapter::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* BackupChapter::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* BackupChapter::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupChapter.name)
  return _impl_.name_.Release();
}
inline void BackupChapter::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupChapter.name)
}

// optional string scanlator = 3;
inline bool BackupChapter::has_scanlator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BackupChapter::clear_scanlator() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scanlator_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackupChapter::scanlator() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupChapter.scanlator)
  return _internal_scanlator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupChapter::set_scanlator(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scanlator_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupChapter.scanlator)
}
inline std::string* BackupChapter::mutable_scanlator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scanlator();
  // @@protoc_insertion_point(field_mutable:BackupChapter.scanlator)
  return _s;
}
inline const std::string& BackupChapter::_internal_scanlator() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scanlator_.Get();
}
inline void BackupChapter::_internal_set_scanlator(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scanlator_.Set(value, GetArena());
}
inline std::string* BackupChapter::_internal_mutable_scanlator() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.scanlator_.Mutable( GetArena());
}
inline std::string* BackupChapter::release_scanlator() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupChapter.scanlator)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.scanlator_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scanlator_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BackupChapter::set_allocated_scanlator(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scanlator_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.scanlator_.IsDefault()) {
          _impl_.scanlator_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupChapter.scanlator)
}

// bool read = 4;
inline void BackupChapter::clear_read() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.read_ = false;
}
inline bool BackupChapter::read() const {
  // @@protoc_insertion_point(field_get:BackupChapter.read)
  return _internal_read();
}
inline void BackupChapter::set_read(bool value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:BackupChapter.read)
}
inline bool BackupChapter::_internal_read() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.read_;
}
inline void BackupChapter::_internal_set_read(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.read_ = value;
}

// bool bookmark = 5;
inline void BackupChapter::clear_bookmark() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bookmark_ = false;
}
inline bool BackupChapter::bookmark() const {
  // @@protoc_insertion_point(field_get:BackupChapter.bookmark)
  return _internal_bookmark();
}
inline void BackupChapter::set_bookmark(bool value) {
  _internal_set_bookmark(value);
  // @@protoc_insertion_point(field_set:BackupChapter.bookmark)
}
inline bool BackupChapter::_internal_bookmark() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bookmark_;
}
inline void BackupChapter::_internal_set_bookmark(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bookmark_ = value;
}

// optional int64 lastPageRead = 6;
inline bool BackupChapter::has_lastpageread() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BackupChapter::clear_lastpageread() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastpageread_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t BackupChapter::lastpageread() const {
  // @@protoc_insertion_point(field_get:BackupChapter.lastPageRead)
  return _internal_lastpageread();
}
inline void BackupChapter::set_lastpageread(::int64_t value) {
  _internal_set_lastpageread(value);
  // @@protoc_insertion_point(field_set:BackupChapter.lastPageRead)
}
inline ::int64_t BackupChapter::_internal_lastpageread() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastpageread_;
}
inline void BackupChapter::_internal_set_lastpageread(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lastpageread_ = value;
}

// int64 dateFetch = 7;
inline void BackupChapter::clear_datefetch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.datefetch_ = ::int64_t{0};
}
inline ::int64_t BackupChapter::datefetch() const {
  // @@protoc_insertion_point(field_get:BackupChapter.dateFetch)
  return _internal_datefetch();
}
inline void BackupChapter::set_datefetch(::int64_t value) {
  _internal_set_datefetch(value);
  // @@protoc_insertion_point(field_set:BackupChapter.dateFetch)
}
inline ::int64_t BackupChapter::_internal_datefetch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.datefetch_;
}
inline void BackupChapter::_internal_set_datefetch(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.datefetch_ = value;
}

// int64 dateUpload = 8;
inline void BackupChapter::clear_dateupload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dateupload_ = ::int64_t{0};
}
inline ::int64_t BackupChapter::dateupload() const {
  // @@protoc_insertion_point(field_get:BackupChapter.dateUpload)
  return _internal_dateupload();
}
inline void BackupChapter::set_dateupload(::int64_t value) {
  _internal_set_dateupload(value);
  // @@protoc_insertion_point(field_set:BackupChapter.dateUpload)
}
inline ::int64_t BackupChapter::_internal_dateupload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dateupload_;
}
inline void BackupChapter::_internal_set_dateupload(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dateupload_ = value;
}

// float chapterNumber = 9;
inline void BackupChapter::clear_chapternumber() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chapternumber_ = 0;
}
inline float BackupChapter::chapternumber() const {
  // @@protoc_insertion_point(field_get:BackupChapter.chapterNumber)
  return _internal_chapternumber();
}
inline void BackupChapter::set_chapternumber(float value) {
  _internal_set_chapternumber(value);
  // @@protoc_insertion_point(field_set:BackupChapter.chapterNumber)
}
inline float BackupChapter::_internal_chapternumber() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chapternumber_;
}
inline void BackupChapter::_internal_set_chapternumber(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chapternumber_ = value;
}

// int64 sourceOrder = 10;
inline void BackupChapter::clear_sourceorder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sourceorder_ = ::int64_t{0};
}
inline ::int64_t BackupChapter::sourceorder() const {
  // @@protoc_insertion_point(field_get:BackupChapter.sourceOrder)
  return _internal_sourceorder();
}
inline void BackupChapter::set_sourceorder(::int64_t value) {
  _internal_set_sourceorder(value);
  // @@protoc_insertion_point(field_set:BackupChapter.sourceOrder)
}
inline ::int64_t BackupChapter::_internal_sourceorder() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sourceorder_;
}
inline void BackupChapter::_internal_set_sourceorder(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sourceorder_ = value;
}

// int64 lastModifiedAt = 11;
inline void BackupChapter::clear_lastmodifiedat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastmodifiedat_ = ::int64_t{0};
}
inline ::int64_t BackupChapter::lastmodifiedat() const {
  // @@protoc_insertion_point(field_get:BackupChapter.lastModifiedAt)
  return _internal_lastmodifiedat();
}
inline void BackupChapter::set_lastmodifiedat(::int64_t value) {
  _internal_set_lastmodifiedat(value);
  // @@protoc_insertion_point(field_set:BackupChapter.lastModifiedAt)
}
inline ::int64_t BackupChapter::_internal_lastmodifiedat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastmodifiedat_;
}
inline void BackupChapter::_internal_set_lastmodifiedat(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lastmodifiedat_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_backup_5fchapter_2eproto_2epb_2eh
