// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: backup_preference.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_backup_5fpreference_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_backup_5fpreference_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_backup_5fpreference_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_backup_5fpreference_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_backup_5fpreference_2eproto;
class BackupPreference;
struct BackupPreferenceDefaultTypeInternal;
extern BackupPreferenceDefaultTypeInternal _BackupPreference_default_instance_;
class BackupSourcePreferences;
struct BackupSourcePreferencesDefaultTypeInternal;
extern BackupSourcePreferencesDefaultTypeInternal _BackupSourcePreferences_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum PreferenceValue : int {
  UNKNOWN = 0,
  INT_VALUE = 2,
  LONG_VALUE = 3,
  FLOAT_VALUE = 4,
  STRING_VALUE = 5,
  BOOL_VALUE = 6,
  STRING_SET_VALUE = 7,
  PreferenceValue_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PreferenceValue_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PreferenceValue_IsValid(int value);
extern const uint32_t PreferenceValue_internal_data_[];
constexpr PreferenceValue PreferenceValue_MIN = static_cast<PreferenceValue>(0);
constexpr PreferenceValue PreferenceValue_MAX = static_cast<PreferenceValue>(7);
constexpr int PreferenceValue_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
PreferenceValue_descriptor();
template <typename T>
const std::string& PreferenceValue_Name(T value) {
  static_assert(std::is_same<T, PreferenceValue>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PreferenceValue_Name().");
  return PreferenceValue_Name(static_cast<PreferenceValue>(value));
}
template <>
inline const std::string& PreferenceValue_Name(PreferenceValue value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PreferenceValue_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool PreferenceValue_Parse(absl::string_view name, PreferenceValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PreferenceValue>(
      PreferenceValue_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class BackupPreference final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:BackupPreference) */ {
 public:
  inline BackupPreference() : BackupPreference(nullptr) {}
  ~BackupPreference() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BackupPreference(
      ::google::protobuf::internal::ConstantInitialized);

  inline BackupPreference(const BackupPreference& from) : BackupPreference(nullptr, from) {}
  inline BackupPreference(BackupPreference&& from) noexcept
      : BackupPreference(nullptr, std::move(from)) {}
  inline BackupPreference& operator=(const BackupPreference& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupPreference& operator=(BackupPreference&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupPreference& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 2,
    kLongValue = 3,
    kFloatValue = 4,
    kStringValue = 5,
    kBoolValue = 6,
    kStringSetValue = 7,
    VALUE_NOT_SET = 0,
  };
  static inline const BackupPreference* internal_default_instance() {
    return reinterpret_cast<const BackupPreference*>(
        &_BackupPreference_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BackupPreference& a, BackupPreference& b) { a.Swap(&b); }
  inline void Swap(BackupPreference* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupPreference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupPreference* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BackupPreference>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BackupPreference& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BackupPreference& from) { BackupPreference::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BackupPreference* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "BackupPreference"; }

 protected:
  explicit BackupPreference(::google::protobuf::Arena* arena);
  BackupPreference(::google::protobuf::Arena* arena, const BackupPreference& from);
  BackupPreference(::google::protobuf::Arena* arena, BackupPreference&& from) noexcept
      : BackupPreference(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kLongValueFieldNumber = 3,
    kFloatValueFieldNumber = 4,
    kStringValueFieldNumber = 5,
    kBoolValueFieldNumber = 6,
    kStringSetValueFieldNumber = 7,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // int32 int_value = 2;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int32_t int_value() const;
  void set_int_value(::int32_t value);

  private:
  ::int32_t _internal_int_value() const;
  void _internal_set_int_value(::int32_t value);

  public:
  // int64 long_value = 3;
  bool has_long_value() const;
  void clear_long_value() ;
  ::int64_t long_value() const;
  void set_long_value(::int64_t value);

  private:
  ::int64_t _internal_long_value() const;
  void _internal_set_long_value(::int64_t value);

  public:
  // float float_value = 4;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  // string string_value = 5;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bool bool_value = 6;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // string string_set_value = 7;
  bool has_string_set_value() const;
  void clear_string_set_value() ;
  const std::string& string_set_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_set_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_set_value();
  PROTOBUF_NODISCARD std::string* release_string_set_value();
  void set_allocated_string_set_value(std::string* value);

  private:
  const std::string& _internal_string_set_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_set_value(
      const std::string& value);
  std::string* _internal_mutable_string_set_value();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:BackupPreference)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_long_value();
  void set_has_float_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_string_set_value();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 7, 0,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BackupPreference_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BackupPreference& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t int_value_;
      ::int64_t long_value_;
      float float_value_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      bool bool_value_;
      ::google::protobuf::internal::ArenaStringPtr string_set_value_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_backup_5fpreference_2eproto;
};
// -------------------------------------------------------------------

class BackupSourcePreferences final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:BackupSourcePreferences) */ {
 public:
  inline BackupSourcePreferences() : BackupSourcePreferences(nullptr) {}
  ~BackupSourcePreferences() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BackupSourcePreferences(
      ::google::protobuf::internal::ConstantInitialized);

  inline BackupSourcePreferences(const BackupSourcePreferences& from) : BackupSourcePreferences(nullptr, from) {}
  inline BackupSourcePreferences(BackupSourcePreferences&& from) noexcept
      : BackupSourcePreferences(nullptr, std::move(from)) {}
  inline BackupSourcePreferences& operator=(const BackupSourcePreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupSourcePreferences& operator=(BackupSourcePreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupSourcePreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupSourcePreferences* internal_default_instance() {
    return reinterpret_cast<const BackupSourcePreferences*>(
        &_BackupSourcePreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BackupSourcePreferences& a, BackupSourcePreferences& b) { a.Swap(&b); }
  inline void Swap(BackupSourcePreferences* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupSourcePreferences* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupSourcePreferences* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BackupSourcePreferences>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BackupSourcePreferences& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BackupSourcePreferences& from) { BackupSourcePreferences::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BackupSourcePreferences* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "BackupSourcePreferences"; }

 protected:
  explicit BackupSourcePreferences(::google::protobuf::Arena* arena);
  BackupSourcePreferences(::google::protobuf::Arena* arena, const BackupSourcePreferences& from);
  BackupSourcePreferences(::google::protobuf::Arena* arena, BackupSourcePreferences&& from) noexcept
      : BackupSourcePreferences(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPrefsFieldNumber = 2,
    kSourceKeyFieldNumber = 1,
  };
  // repeated .BackupPreference prefs = 2;
  int prefs_size() const;
  private:
  int _internal_prefs_size() const;

  public:
  void clear_prefs() ;
  ::BackupPreference* mutable_prefs(int index);
  ::google::protobuf::RepeatedPtrField<::BackupPreference>* mutable_prefs();

  private:
  const ::google::protobuf::RepeatedPtrField<::BackupPreference>& _internal_prefs() const;
  ::google::protobuf::RepeatedPtrField<::BackupPreference>* _internal_mutable_prefs();
  public:
  const ::BackupPreference& prefs(int index) const;
  ::BackupPreference* add_prefs();
  const ::google::protobuf::RepeatedPtrField<::BackupPreference>& prefs() const;
  // string source_key = 1;
  void clear_source_key() ;
  const std::string& source_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_key(Arg_&& arg, Args_... args);
  std::string* mutable_source_key();
  PROTOBUF_NODISCARD std::string* release_source_key();
  void set_allocated_source_key(std::string* value);

  private:
  const std::string& _internal_source_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_key(
      const std::string& value);
  std::string* _internal_mutable_source_key();

  public:
  // @@protoc_insertion_point(class_scope:BackupSourcePreferences)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BackupSourcePreferences_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BackupSourcePreferences& from_msg);
    ::google::protobuf::RepeatedPtrField< ::BackupPreference > prefs_;
    ::google::protobuf::internal::ArenaStringPtr source_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_backup_5fpreference_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BackupPreference

// string key = 1;
inline void BackupPreference::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& BackupPreference::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupPreference.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupPreference::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupPreference.key)
}
inline std::string* BackupPreference::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:BackupPreference.key)
  return _s;
}
inline const std::string& BackupPreference::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void BackupPreference::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* BackupPreference::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* BackupPreference::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BackupPreference.key)
  return _impl_.key_.Release();
}
inline void BackupPreference::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupPreference.key)
}

// int32 int_value = 2;
inline bool BackupPreference::has_int_value() const {
  return value_case() == kIntValue;
}
inline void BackupPreference::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void BackupPreference::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = 0;
    clear_has_value();
  }
}
inline ::int32_t BackupPreference::int_value() const {
  // @@protoc_insertion_point(field_get:BackupPreference.int_value)
  return _internal_int_value();
}
inline void BackupPreference::set_int_value(::int32_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:BackupPreference.int_value)
}
inline ::int32_t BackupPreference::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return 0;
}

// int64 long_value = 3;
inline bool BackupPreference::has_long_value() const {
  return value_case() == kLongValue;
}
inline void BackupPreference::set_has_long_value() {
  _impl_._oneof_case_[0] = kLongValue;
}
inline void BackupPreference::clear_long_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kLongValue) {
    _impl_.value_.long_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t BackupPreference::long_value() const {
  // @@protoc_insertion_point(field_get:BackupPreference.long_value)
  return _internal_long_value();
}
inline void BackupPreference::set_long_value(::int64_t value) {
  if (value_case() != kLongValue) {
    clear_value();
    set_has_long_value();
  }
  _impl_.value_.long_value_ = value;
  // @@protoc_insertion_point(field_set:BackupPreference.long_value)
}
inline ::int64_t BackupPreference::_internal_long_value() const {
  if (value_case() == kLongValue) {
    return _impl_.value_.long_value_;
  }
  return ::int64_t{0};
}

// float float_value = 4;
inline bool BackupPreference::has_float_value() const {
  return value_case() == kFloatValue;
}
inline void BackupPreference::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void BackupPreference::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFloatValue) {
    _impl_.value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float BackupPreference::float_value() const {
  // @@protoc_insertion_point(field_get:BackupPreference.float_value)
  return _internal_float_value();
}
inline void BackupPreference::set_float_value(float value) {
  if (value_case() != kFloatValue) {
    clear_value();
    set_has_float_value();
  }
  _impl_.value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:BackupPreference.float_value)
}
inline float BackupPreference::_internal_float_value() const {
  if (value_case() == kFloatValue) {
    return _impl_.value_.float_value_;
  }
  return 0;
}

// string string_value = 5;
inline bool BackupPreference::has_string_value() const {
  return value_case() == kStringValue;
}
inline void BackupPreference::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void BackupPreference::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& BackupPreference::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupPreference.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupPreference::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupPreference.string_value)
}
inline std::string* BackupPreference::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:BackupPreference.string_value)
  return _s;
}
inline const std::string& BackupPreference::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void BackupPreference::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* BackupPreference::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* BackupPreference::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BackupPreference.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void BackupPreference::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:BackupPreference.string_value)
}

// bool bool_value = 6;
inline bool BackupPreference::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void BackupPreference::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void BackupPreference::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool BackupPreference::bool_value() const {
  // @@protoc_insertion_point(field_get:BackupPreference.bool_value)
  return _internal_bool_value();
}
inline void BackupPreference::set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:BackupPreference.bool_value)
}
inline bool BackupPreference::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}

// string string_set_value = 7;
inline bool BackupPreference::has_string_set_value() const {
  return value_case() == kStringSetValue;
}
inline void BackupPreference::set_has_string_set_value() {
  _impl_._oneof_case_[0] = kStringSetValue;
}
inline void BackupPreference::clear_string_set_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringSetValue) {
    _impl_.value_.string_set_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& BackupPreference::string_set_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupPreference.string_set_value)
  return _internal_string_set_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupPreference::set_string_set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringSetValue) {
    clear_value();

    set_has_string_set_value();
    _impl_.value_.string_set_value_.InitDefault();
  }
  _impl_.value_.string_set_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupPreference.string_set_value)
}
inline std::string* BackupPreference::mutable_string_set_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_set_value();
  // @@protoc_insertion_point(field_mutable:BackupPreference.string_set_value)
  return _s;
}
inline const std::string& BackupPreference::_internal_string_set_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringSetValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_set_value_.Get();
}
inline void BackupPreference::_internal_set_string_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringSetValue) {
    clear_value();

    set_has_string_set_value();
    _impl_.value_.string_set_value_.InitDefault();
  }
  _impl_.value_.string_set_value_.Set(value, GetArena());
}
inline std::string* BackupPreference::_internal_mutable_string_set_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringSetValue) {
    clear_value();

    set_has_string_set_value();
    _impl_.value_.string_set_value_.InitDefault();
  }
  return _impl_.value_.string_set_value_.Mutable( GetArena());
}
inline std::string* BackupPreference::release_string_set_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BackupPreference.string_set_value)
  if (value_case() != kStringSetValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_set_value_.Release();
}
inline void BackupPreference::set_allocated_string_set_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_set_value();
    _impl_.value_.string_set_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:BackupPreference.string_set_value)
}

inline bool BackupPreference::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void BackupPreference::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline BackupPreference::ValueCase BackupPreference::value_case() const {
  return BackupPreference::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BackupSourcePreferences

// string source_key = 1;
inline void BackupSourcePreferences::clear_source_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_key_.ClearToEmpty();
}
inline const std::string& BackupSourcePreferences::source_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupSourcePreferences.source_key)
  return _internal_source_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupSourcePreferences::set_source_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupSourcePreferences.source_key)
}
inline std::string* BackupSourcePreferences::mutable_source_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_key();
  // @@protoc_insertion_point(field_mutable:BackupSourcePreferences.source_key)
  return _s;
}
inline const std::string& BackupSourcePreferences::_internal_source_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_key_.Get();
}
inline void BackupSourcePreferences::_internal_set_source_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_key_.Set(value, GetArena());
}
inline std::string* BackupSourcePreferences::_internal_mutable_source_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_key_.Mutable( GetArena());
}
inline std::string* BackupSourcePreferences::release_source_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:BackupSourcePreferences.source_key)
  return _impl_.source_key_.Release();
}
inline void BackupSourcePreferences::set_allocated_source_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_key_.IsDefault()) {
          _impl_.source_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupSourcePreferences.source_key)
}

// repeated .BackupPreference prefs = 2;
inline int BackupSourcePreferences::_internal_prefs_size() const {
  return _internal_prefs().size();
}
inline int BackupSourcePreferences::prefs_size() const {
  return _internal_prefs_size();
}
inline void BackupSourcePreferences::clear_prefs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefs_.Clear();
}
inline ::BackupPreference* BackupSourcePreferences::mutable_prefs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BackupSourcePreferences.prefs)
  return _internal_mutable_prefs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BackupPreference>* BackupSourcePreferences::mutable_prefs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BackupSourcePreferences.prefs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_prefs();
}
inline const ::BackupPreference& BackupSourcePreferences::prefs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupSourcePreferences.prefs)
  return _internal_prefs().Get(index);
}
inline ::BackupPreference* BackupSourcePreferences::add_prefs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::BackupPreference* _add = _internal_mutable_prefs()->Add();
  // @@protoc_insertion_point(field_add:BackupSourcePreferences.prefs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BackupPreference>& BackupSourcePreferences::prefs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BackupSourcePreferences.prefs)
  return _internal_prefs();
}
inline const ::google::protobuf::RepeatedPtrField<::BackupPreference>&
BackupSourcePreferences::_internal_prefs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prefs_;
}
inline ::google::protobuf::RepeatedPtrField<::BackupPreference>*
BackupSourcePreferences::_internal_mutable_prefs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.prefs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::PreferenceValue> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PreferenceValue>() {
  return ::PreferenceValue_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_backup_5fpreference_2eproto_2epb_2eh
