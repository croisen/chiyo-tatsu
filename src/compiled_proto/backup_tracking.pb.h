// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup_tracking.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_backup_5ftracking_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_backup_5ftracking_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_backup_5ftracking_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_backup_5ftracking_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_backup_5ftracking_2eproto;
class BackupTracking;
struct BackupTrackingDefaultTypeInternal;
extern BackupTrackingDefaultTypeInternal _BackupTracking_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class BackupTracking final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BackupTracking) */ {
 public:
  inline BackupTracking() : BackupTracking(nullptr) {}
  ~BackupTracking() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BackupTracking(::google::protobuf::internal::ConstantInitialized);

  inline BackupTracking(const BackupTracking& from)
      : BackupTracking(nullptr, from) {}
  BackupTracking(BackupTracking&& from) noexcept
    : BackupTracking() {
    *this = ::std::move(from);
  }

  inline BackupTracking& operator=(const BackupTracking& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupTracking& operator=(BackupTracking&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupTracking& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupTracking* internal_default_instance() {
    return reinterpret_cast<const BackupTracking*>(
               &_BackupTracking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BackupTracking& a, BackupTracking& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupTracking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupTracking* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupTracking* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackupTracking>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BackupTracking& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BackupTracking& from) {
    BackupTracking::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BackupTracking* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "BackupTracking";
  }
  protected:
  explicit BackupTracking(::google::protobuf::Arena* arena);
  BackupTracking(::google::protobuf::Arena* arena, const BackupTracking& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingUrlFieldNumber = 4,
    kTitleFieldNumber = 5,
    kLibraryIdFieldNumber = 2,
    kSyncIdFieldNumber = 1,
    kMediaIdIntFieldNumber = 3,
    kLastChapterReadFieldNumber = 6,
    kTotalChaptersFieldNumber = 7,
    kScoreFieldNumber = 8,
    kStatusFieldNumber = 9,
    kStartedReadingDateFieldNumber = 10,
    kFinishedReadingDateFieldNumber = 11,
    kMediaIdFieldNumber = 100,
  };
  // string trackingUrl = 4;
  void clear_trackingurl() ;
  const std::string& trackingurl() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trackingurl(Arg_&& arg, Args_... args);
  std::string* mutable_trackingurl();
  PROTOBUF_NODISCARD std::string* release_trackingurl();
  void set_allocated_trackingurl(std::string* value);

  private:
  const std::string& _internal_trackingurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackingurl(
      const std::string& value);
  std::string* _internal_mutable_trackingurl();

  public:
  // string title = 5;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // int64 libraryId = 2;
  void clear_libraryid() ;
  ::int64_t libraryid() const;
  void set_libraryid(::int64_t value);

  private:
  ::int64_t _internal_libraryid() const;
  void _internal_set_libraryid(::int64_t value);

  public:
  // int32 syncId = 1;
  void clear_syncid() ;
  ::int32_t syncid() const;
  void set_syncid(::int32_t value);

  private:
  ::int32_t _internal_syncid() const;
  void _internal_set_syncid(::int32_t value);

  public:
  // int32 mediaIdInt = 3;
  void clear_mediaidint() ;
  ::int32_t mediaidint() const;
  void set_mediaidint(::int32_t value);

  private:
  ::int32_t _internal_mediaidint() const;
  void _internal_set_mediaidint(::int32_t value);

  public:
  // float lastChapterRead = 6;
  void clear_lastchapterread() ;
  float lastchapterread() const;
  void set_lastchapterread(float value);

  private:
  float _internal_lastchapterread() const;
  void _internal_set_lastchapterread(float value);

  public:
  // int32 totalChapters = 7;
  void clear_totalchapters() ;
  ::int32_t totalchapters() const;
  void set_totalchapters(::int32_t value);

  private:
  ::int32_t _internal_totalchapters() const;
  void _internal_set_totalchapters(::int32_t value);

  public:
  // float score = 8;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // int32 status = 9;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // int64 startedReadingDate = 10;
  void clear_startedreadingdate() ;
  ::int64_t startedreadingdate() const;
  void set_startedreadingdate(::int64_t value);

  private:
  ::int64_t _internal_startedreadingdate() const;
  void _internal_set_startedreadingdate(::int64_t value);

  public:
  // int64 finishedReadingDate = 11;
  void clear_finishedreadingdate() ;
  ::int64_t finishedreadingdate() const;
  void set_finishedreadingdate(::int64_t value);

  private:
  ::int64_t _internal_finishedreadingdate() const;
  void _internal_set_finishedreadingdate(::int64_t value);

  public:
  // int64 mediaId = 100;
  void clear_mediaid() ;
  ::int64_t mediaid() const;
  void set_mediaid(::int64_t value);

  private:
  ::int64_t _internal_mediaid() const;
  void _internal_set_mediaid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:BackupTracking)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      47, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr trackingurl_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::int64_t libraryid_;
    ::int32_t syncid_;
    ::int32_t mediaidint_;
    float lastchapterread_;
    ::int32_t totalchapters_;
    float score_;
    ::int32_t status_;
    ::int64_t startedreadingdate_;
    ::int64_t finishedreadingdate_;
    ::int64_t mediaid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_backup_5ftracking_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BackupTracking

// int32 syncId = 1;
inline void BackupTracking::clear_syncid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.syncid_ = 0;
}
inline ::int32_t BackupTracking::syncid() const {
  // @@protoc_insertion_point(field_get:BackupTracking.syncId)
  return _internal_syncid();
}
inline void BackupTracking::set_syncid(::int32_t value) {
  _internal_set_syncid(value);
  // @@protoc_insertion_point(field_set:BackupTracking.syncId)
}
inline ::int32_t BackupTracking::_internal_syncid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.syncid_;
}
inline void BackupTracking::_internal_set_syncid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.syncid_ = value;
}

// int64 libraryId = 2;
inline void BackupTracking::clear_libraryid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.libraryid_ = ::int64_t{0};
}
inline ::int64_t BackupTracking::libraryid() const {
  // @@protoc_insertion_point(field_get:BackupTracking.libraryId)
  return _internal_libraryid();
}
inline void BackupTracking::set_libraryid(::int64_t value) {
  _internal_set_libraryid(value);
  // @@protoc_insertion_point(field_set:BackupTracking.libraryId)
}
inline ::int64_t BackupTracking::_internal_libraryid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.libraryid_;
}
inline void BackupTracking::_internal_set_libraryid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.libraryid_ = value;
}

// int32 mediaIdInt = 3;
inline void BackupTracking::clear_mediaidint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mediaidint_ = 0;
}
inline ::int32_t BackupTracking::mediaidint() const {
  // @@protoc_insertion_point(field_get:BackupTracking.mediaIdInt)
  return _internal_mediaidint();
}
inline void BackupTracking::set_mediaidint(::int32_t value) {
  _internal_set_mediaidint(value);
  // @@protoc_insertion_point(field_set:BackupTracking.mediaIdInt)
}
inline ::int32_t BackupTracking::_internal_mediaidint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mediaidint_;
}
inline void BackupTracking::_internal_set_mediaidint(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mediaidint_ = value;
}

// string trackingUrl = 4;
inline void BackupTracking::clear_trackingurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trackingurl_.ClearToEmpty();
}
inline const std::string& BackupTracking::trackingurl() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupTracking.trackingUrl)
  return _internal_trackingurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupTracking::set_trackingurl(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trackingurl_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupTracking.trackingUrl)
}
inline std::string* BackupTracking::mutable_trackingurl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trackingurl();
  // @@protoc_insertion_point(field_mutable:BackupTracking.trackingUrl)
  return _s;
}
inline const std::string& BackupTracking::_internal_trackingurl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trackingurl_.Get();
}
inline void BackupTracking::_internal_set_trackingurl(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trackingurl_.Set(value, GetArena());
}
inline std::string* BackupTracking::_internal_mutable_trackingurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trackingurl_.Mutable( GetArena());
}
inline std::string* BackupTracking::release_trackingurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupTracking.trackingUrl)
  return _impl_.trackingurl_.Release();
}
inline void BackupTracking::set_allocated_trackingurl(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trackingurl_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trackingurl_.IsDefault()) {
          _impl_.trackingurl_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupTracking.trackingUrl)
}

// string title = 5;
inline void BackupTracking::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& BackupTracking::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupTracking.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupTracking::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupTracking.title)
}
inline std::string* BackupTracking::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:BackupTracking.title)
  return _s;
}
inline const std::string& BackupTracking::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void BackupTracking::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* BackupTracking::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* BackupTracking::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupTracking.title)
  return _impl_.title_.Release();
}
inline void BackupTracking::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupTracking.title)
}

// float lastChapterRead = 6;
inline void BackupTracking::clear_lastchapterread() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastchapterread_ = 0;
}
inline float BackupTracking::lastchapterread() const {
  // @@protoc_insertion_point(field_get:BackupTracking.lastChapterRead)
  return _internal_lastchapterread();
}
inline void BackupTracking::set_lastchapterread(float value) {
  _internal_set_lastchapterread(value);
  // @@protoc_insertion_point(field_set:BackupTracking.lastChapterRead)
}
inline float BackupTracking::_internal_lastchapterread() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastchapterread_;
}
inline void BackupTracking::_internal_set_lastchapterread(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lastchapterread_ = value;
}

// int32 totalChapters = 7;
inline void BackupTracking::clear_totalchapters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.totalchapters_ = 0;
}
inline ::int32_t BackupTracking::totalchapters() const {
  // @@protoc_insertion_point(field_get:BackupTracking.totalChapters)
  return _internal_totalchapters();
}
inline void BackupTracking::set_totalchapters(::int32_t value) {
  _internal_set_totalchapters(value);
  // @@protoc_insertion_point(field_set:BackupTracking.totalChapters)
}
inline ::int32_t BackupTracking::_internal_totalchapters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.totalchapters_;
}
inline void BackupTracking::_internal_set_totalchapters(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.totalchapters_ = value;
}

// float score = 8;
inline void BackupTracking::clear_score() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.score_ = 0;
}
inline float BackupTracking::score() const {
  // @@protoc_insertion_point(field_get:BackupTracking.score)
  return _internal_score();
}
inline void BackupTracking::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:BackupTracking.score)
}
inline float BackupTracking::_internal_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.score_;
}
inline void BackupTracking::_internal_set_score(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.score_ = value;
}

// int32 status = 9;
inline void BackupTracking::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::int32_t BackupTracking::status() const {
  // @@protoc_insertion_point(field_get:BackupTracking.status)
  return _internal_status();
}
inline void BackupTracking::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BackupTracking.status)
}
inline ::int32_t BackupTracking::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void BackupTracking::_internal_set_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// int64 startedReadingDate = 10;
inline void BackupTracking::clear_startedreadingdate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.startedreadingdate_ = ::int64_t{0};
}
inline ::int64_t BackupTracking::startedreadingdate() const {
  // @@protoc_insertion_point(field_get:BackupTracking.startedReadingDate)
  return _internal_startedreadingdate();
}
inline void BackupTracking::set_startedreadingdate(::int64_t value) {
  _internal_set_startedreadingdate(value);
  // @@protoc_insertion_point(field_set:BackupTracking.startedReadingDate)
}
inline ::int64_t BackupTracking::_internal_startedreadingdate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.startedreadingdate_;
}
inline void BackupTracking::_internal_set_startedreadingdate(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.startedreadingdate_ = value;
}

// int64 finishedReadingDate = 11;
inline void BackupTracking::clear_finishedreadingdate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.finishedreadingdate_ = ::int64_t{0};
}
inline ::int64_t BackupTracking::finishedreadingdate() const {
  // @@protoc_insertion_point(field_get:BackupTracking.finishedReadingDate)
  return _internal_finishedreadingdate();
}
inline void BackupTracking::set_finishedreadingdate(::int64_t value) {
  _internal_set_finishedreadingdate(value);
  // @@protoc_insertion_point(field_set:BackupTracking.finishedReadingDate)
}
inline ::int64_t BackupTracking::_internal_finishedreadingdate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.finishedreadingdate_;
}
inline void BackupTracking::_internal_set_finishedreadingdate(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.finishedreadingdate_ = value;
}

// int64 mediaId = 100;
inline void BackupTracking::clear_mediaid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mediaid_ = ::int64_t{0};
}
inline ::int64_t BackupTracking::mediaid() const {
  // @@protoc_insertion_point(field_get:BackupTracking.mediaId)
  return _internal_mediaid();
}
inline void BackupTracking::set_mediaid(::int64_t value) {
  _internal_set_mediaid(value);
  // @@protoc_insertion_point(field_set:BackupTracking.mediaId)
}
inline ::int64_t BackupTracking::_internal_mediaid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mediaid_;
}
inline void BackupTracking::_internal_set_mediaid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mediaid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_backup_5ftracking_2eproto_2epb_2eh
