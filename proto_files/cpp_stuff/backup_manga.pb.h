// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup_manga.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_backup_5fmanga_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_backup_5fmanga_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "backup_chapter.pb.h"
#include "backup_history.pb.h"
#include "backup_tracking.pb.h"
#include "manga_update_strategy.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_backup_5fmanga_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_backup_5fmanga_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_backup_5fmanga_2eproto;
class BackupManga;
struct BackupMangaDefaultTypeInternal;
extern BackupMangaDefaultTypeInternal _BackupManga_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class BackupManga final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BackupManga) */ {
 public:
  inline BackupManga() : BackupManga(nullptr) {}
  ~BackupManga() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BackupManga(::google::protobuf::internal::ConstantInitialized);

  inline BackupManga(const BackupManga& from)
      : BackupManga(nullptr, from) {}
  BackupManga(BackupManga&& from) noexcept
    : BackupManga() {
    *this = ::std::move(from);
  }

  inline BackupManga& operator=(const BackupManga& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupManga& operator=(BackupManga&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupManga& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupManga* internal_default_instance() {
    return reinterpret_cast<const BackupManga*>(
               &_BackupManga_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BackupManga& a, BackupManga& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupManga* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupManga* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupManga* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackupManga>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BackupManga& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BackupManga& from) {
    BackupManga::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BackupManga* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "BackupManga";
  }
  protected:
  explicit BackupManga(::google::protobuf::Arena* arena);
  BackupManga(::google::protobuf::Arena* arena, const BackupManga& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenreFieldNumber = 7,
    kChaptersFieldNumber = 16,
    kCategoriesFieldNumber = 17,
    kTrackingFieldNumber = 18,
    kBrokenHistoryFieldNumber = 102,
    kHistoryFieldNumber = 104,
    kUrlFieldNumber = 2,
    kTitleFieldNumber = 3,
    kArtistFieldNumber = 4,
    kAuthorFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kThumbnailUrlFieldNumber = 9,
    kCustomCoverFieldNumber = 10,
    kSourceFieldNumber = 1,
    kLastUpdateFieldNumber = 11,
    kStatusFieldNumber = 8,
    kViewerFieldNumber = 14,
    kLastInitFieldNumber = 12,
    kDateAddedFieldNumber = 13,
    kFlagsFieldNumber = 15,
    kFavoriteFieldNumber = 100,
    kChapterFlagsFieldNumber = 101,
    kViewerFlagsFieldNumber = 103,
    kLastModifiedAtFieldNumber = 106,
    kFavoriteModifiedAtFieldNumber = 107,
    kUpdateStrategyFieldNumber = 105,
  };
  // repeated string genre = 7;
  int genre_size() const;
  private:
  int _internal_genre_size() const;

  public:
  void clear_genre() ;
  const std::string& genre(int index) const;
  std::string* mutable_genre(int index);
  void set_genre(int index, const std::string& value);
  void set_genre(int index, std::string&& value);
  void set_genre(int index, const char* value);
  void set_genre(int index, const char* value, std::size_t size);
  void set_genre(int index, absl::string_view value);
  std::string* add_genre();
  void add_genre(const std::string& value);
  void add_genre(std::string&& value);
  void add_genre(const char* value);
  void add_genre(const char* value, std::size_t size);
  void add_genre(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& genre() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_genre();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_genre() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_genre();

  public:
  // repeated .BackupChapter chapters = 16;
  int chapters_size() const;
  private:
  int _internal_chapters_size() const;

  public:
  void clear_chapters() ;
  ::BackupChapter* mutable_chapters(int index);
  ::google::protobuf::RepeatedPtrField< ::BackupChapter >*
      mutable_chapters();
  private:
  const ::google::protobuf::RepeatedPtrField<::BackupChapter>& _internal_chapters() const;
  ::google::protobuf::RepeatedPtrField<::BackupChapter>* _internal_mutable_chapters();
  public:
  const ::BackupChapter& chapters(int index) const;
  ::BackupChapter* add_chapters();
  const ::google::protobuf::RepeatedPtrField< ::BackupChapter >&
      chapters() const;
  // repeated int64 categories = 17;
  int categories_size() const;
  private:
  int _internal_categories_size() const;

  public:
  void clear_categories() ;
  ::int64_t categories(int index) const;
  void set_categories(int index, ::int64_t value);
  void add_categories(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& categories() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_categories();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_categories() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_categories();

  public:
  // repeated .BackupTracking tracking = 18;
  int tracking_size() const;
  private:
  int _internal_tracking_size() const;

  public:
  void clear_tracking() ;
  ::BackupTracking* mutable_tracking(int index);
  ::google::protobuf::RepeatedPtrField< ::BackupTracking >*
      mutable_tracking();
  private:
  const ::google::protobuf::RepeatedPtrField<::BackupTracking>& _internal_tracking() const;
  ::google::protobuf::RepeatedPtrField<::BackupTracking>* _internal_mutable_tracking();
  public:
  const ::BackupTracking& tracking(int index) const;
  ::BackupTracking* add_tracking();
  const ::google::protobuf::RepeatedPtrField< ::BackupTracking >&
      tracking() const;
  // repeated .BrokenBackupHistory brokenHistory = 102;
  int brokenhistory_size() const;
  private:
  int _internal_brokenhistory_size() const;

  public:
  void clear_brokenhistory() ;
  ::BrokenBackupHistory* mutable_brokenhistory(int index);
  ::google::protobuf::RepeatedPtrField< ::BrokenBackupHistory >*
      mutable_brokenhistory();
  private:
  const ::google::protobuf::RepeatedPtrField<::BrokenBackupHistory>& _internal_brokenhistory() const;
  ::google::protobuf::RepeatedPtrField<::BrokenBackupHistory>* _internal_mutable_brokenhistory();
  public:
  const ::BrokenBackupHistory& brokenhistory(int index) const;
  ::BrokenBackupHistory* add_brokenhistory();
  const ::google::protobuf::RepeatedPtrField< ::BrokenBackupHistory >&
      brokenhistory() const;
  // repeated .BackupHistory history = 104;
  int history_size() const;
  private:
  int _internal_history_size() const;

  public:
  void clear_history() ;
  ::BackupHistory* mutable_history(int index);
  ::google::protobuf::RepeatedPtrField< ::BackupHistory >*
      mutable_history();
  private:
  const ::google::protobuf::RepeatedPtrField<::BackupHistory>& _internal_history() const;
  ::google::protobuf::RepeatedPtrField<::BackupHistory>* _internal_mutable_history();
  public:
  const ::BackupHistory& history(int index) const;
  ::BackupHistory* add_history();
  const ::google::protobuf::RepeatedPtrField< ::BackupHistory >&
      history() const;
  // string url = 2;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string title = 3;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // optional string artist = 4;
  bool has_artist() const;
  void clear_artist() ;
  const std::string& artist() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_artist(Arg_&& arg, Args_... args);
  std::string* mutable_artist();
  PROTOBUF_NODISCARD std::string* release_artist();
  void set_allocated_artist(std::string* value);

  private:
  const std::string& _internal_artist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_artist(
      const std::string& value);
  std::string* _internal_mutable_artist();

  public:
  // optional string author = 5;
  bool has_author() const;
  void clear_author() ;
  const std::string& author() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_author(Arg_&& arg, Args_... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* value);

  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(
      const std::string& value);
  std::string* _internal_mutable_author();

  public:
  // optional string description = 6;
  bool has_description() const;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional string thumbnailUrl = 9;
  bool has_thumbnailurl() const;
  void clear_thumbnailurl() ;
  const std::string& thumbnailurl() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_thumbnailurl(Arg_&& arg, Args_... args);
  std::string* mutable_thumbnailurl();
  PROTOBUF_NODISCARD std::string* release_thumbnailurl();
  void set_allocated_thumbnailurl(std::string* value);

  private:
  const std::string& _internal_thumbnailurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnailurl(
      const std::string& value);
  std::string* _internal_mutable_thumbnailurl();

  public:
  // optional string customCover = 10;
  bool has_customcover() const;
  void clear_customcover() ;
  const std::string& customcover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customcover(Arg_&& arg, Args_... args);
  std::string* mutable_customcover();
  PROTOBUF_NODISCARD std::string* release_customcover();
  void set_allocated_customcover(std::string* value);

  private:
  const std::string& _internal_customcover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customcover(
      const std::string& value);
  std::string* _internal_mutable_customcover();

  public:
  // int64 source = 1;
  void clear_source() ;
  ::int64_t source() const;
  void set_source(::int64_t value);

  private:
  ::int64_t _internal_source() const;
  void _internal_set_source(::int64_t value);

  public:
  // optional int64 lastUpdate = 11;
  bool has_lastupdate() const;
  void clear_lastupdate() ;
  ::int64_t lastupdate() const;
  void set_lastupdate(::int64_t value);

  private:
  ::int64_t _internal_lastupdate() const;
  void _internal_set_lastupdate(::int64_t value);

  public:
  // int32 status = 8;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // int32 viewer = 14;
  void clear_viewer() ;
  ::int32_t viewer() const;
  void set_viewer(::int32_t value);

  private:
  ::int32_t _internal_viewer() const;
  void _internal_set_viewer(::int32_t value);

  public:
  // optional int64 lastInit = 12;
  bool has_lastinit() const;
  void clear_lastinit() ;
  ::int64_t lastinit() const;
  void set_lastinit(::int64_t value);

  private:
  ::int64_t _internal_lastinit() const;
  void _internal_set_lastinit(::int64_t value);

  public:
  // int64 dateAdded = 13;
  void clear_dateadded() ;
  ::int64_t dateadded() const;
  void set_dateadded(::int64_t value);

  private:
  ::int64_t _internal_dateadded() const;
  void _internal_set_dateadded(::int64_t value);

  public:
  // optional int32 flags = 15;
  bool has_flags() const;
  void clear_flags() ;
  ::int32_t flags() const;
  void set_flags(::int32_t value);

  private:
  ::int32_t _internal_flags() const;
  void _internal_set_flags(::int32_t value);

  public:
  // bool favorite = 100;
  void clear_favorite() ;
  bool favorite() const;
  void set_favorite(bool value);

  private:
  bool _internal_favorite() const;
  void _internal_set_favorite(bool value);

  public:
  // int32 chapterFlags = 101;
  void clear_chapterflags() ;
  ::int32_t chapterflags() const;
  void set_chapterflags(::int32_t value);

  private:
  ::int32_t _internal_chapterflags() const;
  void _internal_set_chapterflags(::int32_t value);

  public:
  // optional int32 viewer_flags = 103;
  bool has_viewer_flags() const;
  void clear_viewer_flags() ;
  ::int32_t viewer_flags() const;
  void set_viewer_flags(::int32_t value);

  private:
  ::int32_t _internal_viewer_flags() const;
  void _internal_set_viewer_flags(::int32_t value);

  public:
  // int64 lastModifiedAt = 106;
  void clear_lastmodifiedat() ;
  ::int64_t lastmodifiedat() const;
  void set_lastmodifiedat(::int64_t value);

  private:
  ::int64_t _internal_lastmodifiedat() const;
  void _internal_set_lastmodifiedat(::int64_t value);

  public:
  // optional int64 favoriteModifiedAt = 107;
  bool has_favoritemodifiedat() const;
  void clear_favoritemodifiedat() ;
  ::int64_t favoritemodifiedat() const;
  void set_favoritemodifiedat(::int64_t value);

  private:
  ::int64_t _internal_favoritemodifiedat() const;
  void _internal_set_favoritemodifiedat(::int64_t value);

  public:
  // .UpdateStrategy updateStrategy = 105;
  void clear_updatestrategy() ;
  ::UpdateStrategy updatestrategy() const;
  void set_updatestrategy(::UpdateStrategy value);

  private:
  ::UpdateStrategy _internal_updatestrategy() const;
  void _internal_set_updatestrategy(::UpdateStrategy value);

  public:
  // @@protoc_insertion_point(class_scope:BackupManga)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 26, 4,
      103, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> genre_;
    ::google::protobuf::RepeatedPtrField< ::BackupChapter > chapters_;
    ::google::protobuf::RepeatedField<::int64_t> categories_;
    mutable ::google::protobuf::internal::CachedSize _categories_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::BackupTracking > tracking_;
    ::google::protobuf::RepeatedPtrField< ::BrokenBackupHistory > brokenhistory_;
    ::google::protobuf::RepeatedPtrField< ::BackupHistory > history_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr artist_;
    ::google::protobuf::internal::ArenaStringPtr author_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr thumbnailurl_;
    ::google::protobuf::internal::ArenaStringPtr customcover_;
    ::int64_t source_;
    ::int64_t lastupdate_;
    ::int32_t status_;
    ::int32_t viewer_;
    ::int64_t lastinit_;
    ::int64_t dateadded_;
    ::int32_t flags_;
    bool favorite_;
    ::int32_t chapterflags_;
    ::int32_t viewer_flags_;
    ::int64_t lastmodifiedat_;
    ::int64_t favoritemodifiedat_;
    int updatestrategy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_backup_5fmanga_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BackupManga

// int64 source = 1;
inline void BackupManga::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_ = ::int64_t{0};
}
inline ::int64_t BackupManga::source() const {
  // @@protoc_insertion_point(field_get:BackupManga.source)
  return _internal_source();
}
inline void BackupManga::set_source(::int64_t value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:BackupManga.source)
}
inline ::int64_t BackupManga::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_;
}
inline void BackupManga::_internal_set_source(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_ = value;
}

// string url = 2;
inline void BackupManga::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& BackupManga::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupManga::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupManga.url)
}
inline std::string* BackupManga::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:BackupManga.url)
  return _s;
}
inline const std::string& BackupManga::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void BackupManga::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* BackupManga::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* BackupManga::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupManga.url)
  return _impl_.url_.Release();
}
inline void BackupManga::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupManga.url)
}

// string title = 3;
inline void BackupManga::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& BackupManga::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupManga::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupManga.title)
}
inline std::string* BackupManga::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:BackupManga.title)
  return _s;
}
inline const std::string& BackupManga::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void BackupManga::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* BackupManga::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* BackupManga::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupManga.title)
  return _impl_.title_.Release();
}
inline void BackupManga::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupManga.title)
}

// optional string artist = 4;
inline bool BackupManga::has_artist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BackupManga::clear_artist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.artist_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackupManga::artist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.artist)
  return _internal_artist();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupManga::set_artist(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.artist_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupManga.artist)
}
inline std::string* BackupManga::mutable_artist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_artist();
  // @@protoc_insertion_point(field_mutable:BackupManga.artist)
  return _s;
}
inline const std::string& BackupManga::_internal_artist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.artist_.Get();
}
inline void BackupManga::_internal_set_artist(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.artist_.Set(value, GetArena());
}
inline std::string* BackupManga::_internal_mutable_artist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.artist_.Mutable( GetArena());
}
inline std::string* BackupManga::release_artist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupManga.artist)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.artist_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.artist_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BackupManga::set_allocated_artist(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.artist_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.artist_.IsDefault()) {
          _impl_.artist_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupManga.artist)
}

// optional string author = 5;
inline bool BackupManga::has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BackupManga::clear_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.author_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BackupManga::author() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.author)
  return _internal_author();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupManga::set_author(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.author_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupManga.author)
}
inline std::string* BackupManga::mutable_author() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:BackupManga.author)
  return _s;
}
inline const std::string& BackupManga::_internal_author() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.author_.Get();
}
inline void BackupManga::_internal_set_author(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.author_.Set(value, GetArena());
}
inline std::string* BackupManga::_internal_mutable_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.author_.Mutable( GetArena());
}
inline std::string* BackupManga::release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupManga.author)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.author_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.author_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BackupManga::set_allocated_author(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.author_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.author_.IsDefault()) {
          _impl_.author_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupManga.author)
}

// optional string description = 6;
inline bool BackupManga::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BackupManga::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BackupManga::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupManga::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupManga.description)
}
inline std::string* BackupManga::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:BackupManga.description)
  return _s;
}
inline const std::string& BackupManga::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void BackupManga::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* BackupManga::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* BackupManga::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupManga.description)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.description_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BackupManga::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupManga.description)
}

// repeated string genre = 7;
inline int BackupManga::_internal_genre_size() const {
  return _internal_genre().size();
}
inline int BackupManga::genre_size() const {
  return _internal_genre_size();
}
inline void BackupManga::clear_genre() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.genre_.Clear();
}
inline std::string* BackupManga::add_genre()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_genre()->Add();
  // @@protoc_insertion_point(field_add_mutable:BackupManga.genre)
  return _s;
}
inline const std::string& BackupManga::genre(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.genre)
  return _internal_genre().Get(index);
}
inline std::string* BackupManga::mutable_genre(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BackupManga.genre)
  return _internal_mutable_genre()->Mutable(index);
}
inline void BackupManga::set_genre(int index, const std::string& value) {
  _internal_mutable_genre()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:BackupManga.genre)
}
inline void BackupManga::set_genre(int index, std::string&& value) {
  _internal_mutable_genre()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:BackupManga.genre)
}
inline void BackupManga::set_genre(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_genre()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BackupManga.genre)
}
inline void BackupManga::set_genre(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_genre()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BackupManga.genre)
}
inline void BackupManga::set_genre(int index, absl::string_view value) {
  _internal_mutable_genre()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:BackupManga.genre)
}
inline void BackupManga::add_genre(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_genre()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:BackupManga.genre)
}
inline void BackupManga::add_genre(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_genre()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:BackupManga.genre)
}
inline void BackupManga::add_genre(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_genre()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BackupManga.genre)
}
inline void BackupManga::add_genre(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_genre()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BackupManga.genre)
}
inline void BackupManga::add_genre(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_genre()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:BackupManga.genre)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BackupManga::genre() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BackupManga.genre)
  return _internal_genre();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BackupManga::mutable_genre() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BackupManga.genre)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_genre();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BackupManga::_internal_genre() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.genre_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BackupManga::_internal_mutable_genre() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.genre_;
}

// int32 status = 8;
inline void BackupManga::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::int32_t BackupManga::status() const {
  // @@protoc_insertion_point(field_get:BackupManga.status)
  return _internal_status();
}
inline void BackupManga::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BackupManga.status)
}
inline ::int32_t BackupManga::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void BackupManga::_internal_set_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// optional string thumbnailUrl = 9;
inline bool BackupManga::has_thumbnailurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BackupManga::clear_thumbnailurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.thumbnailurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BackupManga::thumbnailurl() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.thumbnailUrl)
  return _internal_thumbnailurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupManga::set_thumbnailurl(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.thumbnailurl_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupManga.thumbnailUrl)
}
inline std::string* BackupManga::mutable_thumbnailurl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_thumbnailurl();
  // @@protoc_insertion_point(field_mutable:BackupManga.thumbnailUrl)
  return _s;
}
inline const std::string& BackupManga::_internal_thumbnailurl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.thumbnailurl_.Get();
}
inline void BackupManga::_internal_set_thumbnailurl(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.thumbnailurl_.Set(value, GetArena());
}
inline std::string* BackupManga::_internal_mutable_thumbnailurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.thumbnailurl_.Mutable( GetArena());
}
inline std::string* BackupManga::release_thumbnailurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupManga.thumbnailUrl)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.thumbnailurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailurl_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BackupManga::set_allocated_thumbnailurl(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.thumbnailurl_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.thumbnailurl_.IsDefault()) {
          _impl_.thumbnailurl_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupManga.thumbnailUrl)
}

// optional string customCover = 10;
inline bool BackupManga::has_customcover() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void BackupManga::clear_customcover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.customcover_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BackupManga::customcover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.customCover)
  return _internal_customcover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BackupManga::set_customcover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.customcover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BackupManga.customCover)
}
inline std::string* BackupManga::mutable_customcover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_customcover();
  // @@protoc_insertion_point(field_mutable:BackupManga.customCover)
  return _s;
}
inline const std::string& BackupManga::_internal_customcover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.customcover_.Get();
}
inline void BackupManga::_internal_set_customcover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.customcover_.Set(value, GetArena());
}
inline std::string* BackupManga::_internal_mutable_customcover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.customcover_.Mutable( GetArena());
}
inline std::string* BackupManga::release_customcover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BackupManga.customCover)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.customcover_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customcover_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BackupManga::set_allocated_customcover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.customcover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customcover_.IsDefault()) {
          _impl_.customcover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BackupManga.customCover)
}

// optional int64 lastUpdate = 11;
inline bool BackupManga::has_lastupdate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void BackupManga::clear_lastupdate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastupdate_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t BackupManga::lastupdate() const {
  // @@protoc_insertion_point(field_get:BackupManga.lastUpdate)
  return _internal_lastupdate();
}
inline void BackupManga::set_lastupdate(::int64_t value) {
  _internal_set_lastupdate(value);
  // @@protoc_insertion_point(field_set:BackupManga.lastUpdate)
}
inline ::int64_t BackupManga::_internal_lastupdate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastupdate_;
}
inline void BackupManga::_internal_set_lastupdate(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lastupdate_ = value;
}

// optional int64 lastInit = 12;
inline bool BackupManga::has_lastinit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void BackupManga::clear_lastinit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastinit_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t BackupManga::lastinit() const {
  // @@protoc_insertion_point(field_get:BackupManga.lastInit)
  return _internal_lastinit();
}
inline void BackupManga::set_lastinit(::int64_t value) {
  _internal_set_lastinit(value);
  // @@protoc_insertion_point(field_set:BackupManga.lastInit)
}
inline ::int64_t BackupManga::_internal_lastinit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastinit_;
}
inline void BackupManga::_internal_set_lastinit(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.lastinit_ = value;
}

// int64 dateAdded = 13;
inline void BackupManga::clear_dateadded() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dateadded_ = ::int64_t{0};
}
inline ::int64_t BackupManga::dateadded() const {
  // @@protoc_insertion_point(field_get:BackupManga.dateAdded)
  return _internal_dateadded();
}
inline void BackupManga::set_dateadded(::int64_t value) {
  _internal_set_dateadded(value);
  // @@protoc_insertion_point(field_set:BackupManga.dateAdded)
}
inline ::int64_t BackupManga::_internal_dateadded() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dateadded_;
}
inline void BackupManga::_internal_set_dateadded(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dateadded_ = value;
}

// int32 viewer = 14;
inline void BackupManga::clear_viewer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.viewer_ = 0;
}
inline ::int32_t BackupManga::viewer() const {
  // @@protoc_insertion_point(field_get:BackupManga.viewer)
  return _internal_viewer();
}
inline void BackupManga::set_viewer(::int32_t value) {
  _internal_set_viewer(value);
  // @@protoc_insertion_point(field_set:BackupManga.viewer)
}
inline ::int32_t BackupManga::_internal_viewer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.viewer_;
}
inline void BackupManga::_internal_set_viewer(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.viewer_ = value;
}

// optional int32 flags = 15;
inline bool BackupManga::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void BackupManga::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t BackupManga::flags() const {
  // @@protoc_insertion_point(field_get:BackupManga.flags)
  return _internal_flags();
}
inline void BackupManga::set_flags(::int32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:BackupManga.flags)
}
inline ::int32_t BackupManga::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void BackupManga::_internal_set_flags(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.flags_ = value;
}

// repeated .BackupChapter chapters = 16;
inline int BackupManga::_internal_chapters_size() const {
  return _internal_chapters().size();
}
inline int BackupManga::chapters_size() const {
  return _internal_chapters_size();
}
inline ::BackupChapter* BackupManga::mutable_chapters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BackupManga.chapters)
  return _internal_mutable_chapters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BackupChapter>* BackupManga::mutable_chapters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BackupManga.chapters)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_chapters();
}
inline const ::BackupChapter& BackupManga::chapters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.chapters)
  return _internal_chapters().Get(index);
}
inline ::BackupChapter* BackupManga::add_chapters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::BackupChapter* _add = _internal_mutable_chapters()->Add();
  // @@protoc_insertion_point(field_add:BackupManga.chapters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BackupChapter>& BackupManga::chapters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BackupManga.chapters)
  return _internal_chapters();
}
inline const ::google::protobuf::RepeatedPtrField<::BackupChapter>&
BackupManga::_internal_chapters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chapters_;
}
inline ::google::protobuf::RepeatedPtrField<::BackupChapter>*
BackupManga::_internal_mutable_chapters() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.chapters_;
}

// repeated int64 categories = 17;
inline int BackupManga::_internal_categories_size() const {
  return _internal_categories().size();
}
inline int BackupManga::categories_size() const {
  return _internal_categories_size();
}
inline void BackupManga::clear_categories() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.categories_.Clear();
}
inline ::int64_t BackupManga::categories(int index) const {
  // @@protoc_insertion_point(field_get:BackupManga.categories)
  return _internal_categories().Get(index);
}
inline void BackupManga::set_categories(int index, ::int64_t value) {
  _internal_mutable_categories()->Set(index, value);
  // @@protoc_insertion_point(field_set:BackupManga.categories)
}
inline void BackupManga::add_categories(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_categories()->Add(value);
  // @@protoc_insertion_point(field_add:BackupManga.categories)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& BackupManga::categories() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BackupManga.categories)
  return _internal_categories();
}
inline ::google::protobuf::RepeatedField<::int64_t>* BackupManga::mutable_categories()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BackupManga.categories)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_categories();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& BackupManga::_internal_categories()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.categories_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* BackupManga::_internal_mutable_categories() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.categories_;
}

// repeated .BackupTracking tracking = 18;
inline int BackupManga::_internal_tracking_size() const {
  return _internal_tracking().size();
}
inline int BackupManga::tracking_size() const {
  return _internal_tracking_size();
}
inline ::BackupTracking* BackupManga::mutable_tracking(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BackupManga.tracking)
  return _internal_mutable_tracking()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BackupTracking>* BackupManga::mutable_tracking()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BackupManga.tracking)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tracking();
}
inline const ::BackupTracking& BackupManga::tracking(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.tracking)
  return _internal_tracking().Get(index);
}
inline ::BackupTracking* BackupManga::add_tracking() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::BackupTracking* _add = _internal_mutable_tracking()->Add();
  // @@protoc_insertion_point(field_add:BackupManga.tracking)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BackupTracking>& BackupManga::tracking() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BackupManga.tracking)
  return _internal_tracking();
}
inline const ::google::protobuf::RepeatedPtrField<::BackupTracking>&
BackupManga::_internal_tracking() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tracking_;
}
inline ::google::protobuf::RepeatedPtrField<::BackupTracking>*
BackupManga::_internal_mutable_tracking() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tracking_;
}

// bool favorite = 100;
inline void BackupManga::clear_favorite() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.favorite_ = false;
}
inline bool BackupManga::favorite() const {
  // @@protoc_insertion_point(field_get:BackupManga.favorite)
  return _internal_favorite();
}
inline void BackupManga::set_favorite(bool value) {
  _internal_set_favorite(value);
  // @@protoc_insertion_point(field_set:BackupManga.favorite)
}
inline bool BackupManga::_internal_favorite() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.favorite_;
}
inline void BackupManga::_internal_set_favorite(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.favorite_ = value;
}

// int32 chapterFlags = 101;
inline void BackupManga::clear_chapterflags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chapterflags_ = 0;
}
inline ::int32_t BackupManga::chapterflags() const {
  // @@protoc_insertion_point(field_get:BackupManga.chapterFlags)
  return _internal_chapterflags();
}
inline void BackupManga::set_chapterflags(::int32_t value) {
  _internal_set_chapterflags(value);
  // @@protoc_insertion_point(field_set:BackupManga.chapterFlags)
}
inline ::int32_t BackupManga::_internal_chapterflags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chapterflags_;
}
inline void BackupManga::_internal_set_chapterflags(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chapterflags_ = value;
}

// repeated .BrokenBackupHistory brokenHistory = 102;
inline int BackupManga::_internal_brokenhistory_size() const {
  return _internal_brokenhistory().size();
}
inline int BackupManga::brokenhistory_size() const {
  return _internal_brokenhistory_size();
}
inline ::BrokenBackupHistory* BackupManga::mutable_brokenhistory(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BackupManga.brokenHistory)
  return _internal_mutable_brokenhistory()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BrokenBackupHistory>* BackupManga::mutable_brokenhistory()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BackupManga.brokenHistory)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_brokenhistory();
}
inline const ::BrokenBackupHistory& BackupManga::brokenhistory(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.brokenHistory)
  return _internal_brokenhistory().Get(index);
}
inline ::BrokenBackupHistory* BackupManga::add_brokenhistory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::BrokenBackupHistory* _add = _internal_mutable_brokenhistory()->Add();
  // @@protoc_insertion_point(field_add:BackupManga.brokenHistory)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BrokenBackupHistory>& BackupManga::brokenhistory() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BackupManga.brokenHistory)
  return _internal_brokenhistory();
}
inline const ::google::protobuf::RepeatedPtrField<::BrokenBackupHistory>&
BackupManga::_internal_brokenhistory() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brokenhistory_;
}
inline ::google::protobuf::RepeatedPtrField<::BrokenBackupHistory>*
BackupManga::_internal_mutable_brokenhistory() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.brokenhistory_;
}

// optional int32 viewer_flags = 103;
inline bool BackupManga::has_viewer_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void BackupManga::clear_viewer_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.viewer_flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t BackupManga::viewer_flags() const {
  // @@protoc_insertion_point(field_get:BackupManga.viewer_flags)
  return _internal_viewer_flags();
}
inline void BackupManga::set_viewer_flags(::int32_t value) {
  _internal_set_viewer_flags(value);
  // @@protoc_insertion_point(field_set:BackupManga.viewer_flags)
}
inline ::int32_t BackupManga::_internal_viewer_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.viewer_flags_;
}
inline void BackupManga::_internal_set_viewer_flags(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.viewer_flags_ = value;
}

// repeated .BackupHistory history = 104;
inline int BackupManga::_internal_history_size() const {
  return _internal_history().size();
}
inline int BackupManga::history_size() const {
  return _internal_history_size();
}
inline ::BackupHistory* BackupManga::mutable_history(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BackupManga.history)
  return _internal_mutable_history()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BackupHistory>* BackupManga::mutable_history()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BackupManga.history)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_history();
}
inline const ::BackupHistory& BackupManga::history(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BackupManga.history)
  return _internal_history().Get(index);
}
inline ::BackupHistory* BackupManga::add_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::BackupHistory* _add = _internal_mutable_history()->Add();
  // @@protoc_insertion_point(field_add:BackupManga.history)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BackupHistory>& BackupManga::history() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BackupManga.history)
  return _internal_history();
}
inline const ::google::protobuf::RepeatedPtrField<::BackupHistory>&
BackupManga::_internal_history() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.history_;
}
inline ::google::protobuf::RepeatedPtrField<::BackupHistory>*
BackupManga::_internal_mutable_history() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.history_;
}

// .UpdateStrategy updateStrategy = 105;
inline void BackupManga::clear_updatestrategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.updatestrategy_ = 0;
}
inline ::UpdateStrategy BackupManga::updatestrategy() const {
  // @@protoc_insertion_point(field_get:BackupManga.updateStrategy)
  return _internal_updatestrategy();
}
inline void BackupManga::set_updatestrategy(::UpdateStrategy value) {
  _internal_set_updatestrategy(value);
  // @@protoc_insertion_point(field_set:BackupManga.updateStrategy)
}
inline ::UpdateStrategy BackupManga::_internal_updatestrategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::UpdateStrategy>(_impl_.updatestrategy_);
}
inline void BackupManga::_internal_set_updatestrategy(::UpdateStrategy value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.updatestrategy_ = value;
}

// int64 lastModifiedAt = 106;
inline void BackupManga::clear_lastmodifiedat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastmodifiedat_ = ::int64_t{0};
}
inline ::int64_t BackupManga::lastmodifiedat() const {
  // @@protoc_insertion_point(field_get:BackupManga.lastModifiedAt)
  return _internal_lastmodifiedat();
}
inline void BackupManga::set_lastmodifiedat(::int64_t value) {
  _internal_set_lastmodifiedat(value);
  // @@protoc_insertion_point(field_set:BackupManga.lastModifiedAt)
}
inline ::int64_t BackupManga::_internal_lastmodifiedat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastmodifiedat_;
}
inline void BackupManga::_internal_set_lastmodifiedat(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lastmodifiedat_ = value;
}

// optional int64 favoriteModifiedAt = 107;
inline bool BackupManga::has_favoritemodifiedat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void BackupManga::clear_favoritemodifiedat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.favoritemodifiedat_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t BackupManga::favoritemodifiedat() const {
  // @@protoc_insertion_point(field_get:BackupManga.favoriteModifiedAt)
  return _internal_favoritemodifiedat();
}
inline void BackupManga::set_favoritemodifiedat(::int64_t value) {
  _internal_set_favoritemodifiedat(value);
  // @@protoc_insertion_point(field_set:BackupManga.favoriteModifiedAt)
}
inline ::int64_t BackupManga::_internal_favoritemodifiedat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.favoritemodifiedat_;
}
inline void BackupManga::_internal_set_favoritemodifiedat(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.favoritemodifiedat_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_backup_5fmanga_2eproto_2epb_2eh
