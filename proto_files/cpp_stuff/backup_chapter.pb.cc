// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup_chapter.proto

#include "backup_chapter.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr BackupChapter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        scanlator_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lastpageread_{::int64_t{0}},
        read_{false},
        bookmark_{false},
        chapternumber_{0},
        datefetch_{::int64_t{0}},
        dateupload_{::int64_t{0}},
        sourceorder_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BackupChapter::BackupChapter(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BackupChapterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackupChapterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackupChapterDefaultTypeInternal() {}
  union {
    BackupChapter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackupChapterDefaultTypeInternal _BackupChapter_default_instance_;
static ::_pb::Metadata file_level_metadata_backup_5fchapter_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_backup_5fchapter_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_backup_5fchapter_2eproto = nullptr;
const ::uint32_t TableStruct_backup_5fchapter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.url_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.scanlator_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.read_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.bookmark_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.lastpageread_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.datefetch_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.dateupload_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.chapternumber_),
    PROTOBUF_FIELD_OFFSET(::BackupChapter, _impl_.sourceorder_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::BackupChapter)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_BackupChapter_default_instance_._instance,
};
const char descriptor_table_protodef_backup_5fchapter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024backup_chapter.proto\"\306\001\n\rBackupChapter"
    "\022\013\n\003url\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\tscanlator"
    "\030\003 \001(\t\022\014\n\004read\030\004 \001(\010\022\020\n\010bookmark\030\005 \001(\010\022\024"
    "\n\014lastPageRead\030\006 \001(\003\022\021\n\tdateFetch\030\007 \001(\003\022"
    "\022\n\ndateUpload\030\010 \001(\003\022\025\n\rchapterNumber\030\t \001"
    "(\002\022\023\n\013sourceOrder\030\n \001(\003b\006proto3"
};
static ::absl::once_flag descriptor_table_backup_5fchapter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_backup_5fchapter_2eproto = {
    false,
    false,
    231,
    descriptor_table_protodef_backup_5fchapter_2eproto,
    "backup_chapter.proto",
    &descriptor_table_backup_5fchapter_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_backup_5fchapter_2eproto::offsets,
    file_level_metadata_backup_5fchapter_2eproto,
    file_level_enum_descriptors_backup_5fchapter_2eproto,
    file_level_service_descriptors_backup_5fchapter_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_backup_5fchapter_2eproto_getter() {
  return &descriptor_table_backup_5fchapter_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_backup_5fchapter_2eproto(&descriptor_table_backup_5fchapter_2eproto);
// ===================================================================

class BackupChapter::_Internal {
 public:
};

BackupChapter::BackupChapter(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:BackupChapter)
}
inline PROTOBUF_NDEBUG_INLINE BackupChapter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : url_(arena, from.url_),
        name_(arena, from.name_),
        scanlator_(arena, from.scanlator_),
        _cached_size_{0} {}

BackupChapter::BackupChapter(
    ::google::protobuf::Arena* arena,
    const BackupChapter& from)
    : ::google::protobuf::Message(arena) {
  BackupChapter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lastpageread_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lastpageread_),
           offsetof(Impl_, sourceorder_) -
               offsetof(Impl_, lastpageread_) +
               sizeof(Impl_::sourceorder_));

  // @@protoc_insertion_point(copy_constructor:BackupChapter)
}
inline PROTOBUF_NDEBUG_INLINE BackupChapter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : url_(arena),
        name_(arena),
        scanlator_(arena),
        _cached_size_{0} {}

inline void BackupChapter::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lastpageread_),
           0,
           offsetof(Impl_, sourceorder_) -
               offsetof(Impl_, lastpageread_) +
               sizeof(Impl_::sourceorder_));
}
BackupChapter::~BackupChapter() {
  // @@protoc_insertion_point(destructor:BackupChapter)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BackupChapter::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.url_.Destroy();
  _impl_.name_.Destroy();
  _impl_.scanlator_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void BackupChapter::Clear() {
// @@protoc_insertion_point(message_clear_start:BackupChapter)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.scanlator_.ClearToEmpty();
  ::memset(&_impl_.lastpageread_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sourceorder_) -
      reinterpret_cast<char*>(&_impl_.lastpageread_)) + sizeof(_impl_.sourceorder_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BackupChapter::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 46, 2> BackupChapter::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BackupChapter_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string url = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.url_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.name_)}},
    // string scanlator = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.scanlator_)}},
    // bool read = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BackupChapter, _impl_.read_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.read_)}},
    // bool bookmark = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BackupChapter, _impl_.bookmark_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.bookmark_)}},
    // int64 lastPageRead = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupChapter, _impl_.lastpageread_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.lastpageread_)}},
    // int64 dateFetch = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupChapter, _impl_.datefetch_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.datefetch_)}},
    // int64 dateUpload = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupChapter, _impl_.dateupload_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.dateupload_)}},
    // float chapterNumber = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.chapternumber_)}},
    // int64 sourceOrder = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BackupChapter, _impl_.sourceorder_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.sourceorder_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string url = 1;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string scanlator = 3;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.scanlator_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool read = 4;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.read_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool bookmark = 5;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.bookmark_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 lastPageRead = 6;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.lastpageread_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 dateFetch = 7;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.datefetch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 dateUpload = 8;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.dateupload_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // float chapterNumber = 9;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.chapternumber_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int64 sourceOrder = 10;
    {PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.sourceorder_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\15\3\4\11\0\0\0\0\0\0\0\0\0\0\0\0"
    "BackupChapter"
    "url"
    "name"
    "scanlator"
  }},
};

::uint8_t* BackupChapter::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackupChapter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    const std::string& _s = this->_internal_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupChapter.url");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupChapter.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string scanlator = 3;
  if (!this->_internal_scanlator().empty()) {
    const std::string& _s = this->_internal_scanlator();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BackupChapter.scanlator");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool read = 4;
  if (this->_internal_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_read(), target);
  }

  // bool bookmark = 5;
  if (this->_internal_bookmark() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_bookmark(), target);
  }

  // int64 lastPageRead = 6;
  if (this->_internal_lastpageread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_lastpageread(), target);
  }

  // int64 dateFetch = 7;
  if (this->_internal_datefetch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<7>(
            stream, this->_internal_datefetch(), target);
  }

  // int64 dateUpload = 8;
  if (this->_internal_dateupload() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<8>(
            stream, this->_internal_dateupload(), target);
  }

  // float chapterNumber = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chapternumber = this->_internal_chapternumber();
  ::uint32_t raw_chapternumber;
  memcpy(&raw_chapternumber, &tmp_chapternumber, sizeof(tmp_chapternumber));
  if (raw_chapternumber != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_chapternumber(), target);
  }

  // int64 sourceOrder = 10;
  if (this->_internal_sourceorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<10>(
            stream, this->_internal_sourceorder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackupChapter)
  return target;
}

::size_t BackupChapter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BackupChapter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_url());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string scanlator = 3;
  if (!this->_internal_scanlator().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_scanlator());
  }

  // int64 lastPageRead = 6;
  if (this->_internal_lastpageread() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_lastpageread());
  }

  // bool read = 4;
  if (this->_internal_read() != 0) {
    total_size += 2;
  }

  // bool bookmark = 5;
  if (this->_internal_bookmark() != 0) {
    total_size += 2;
  }

  // float chapterNumber = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chapternumber = this->_internal_chapternumber();
  ::uint32_t raw_chapternumber;
  memcpy(&raw_chapternumber, &tmp_chapternumber, sizeof(tmp_chapternumber));
  if (raw_chapternumber != 0) {
    total_size += 5;
  }

  // int64 dateFetch = 7;
  if (this->_internal_datefetch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_datefetch());
  }

  // int64 dateUpload = 8;
  if (this->_internal_dateupload() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_dateupload());
  }

  // int64 sourceOrder = 10;
  if (this->_internal_sourceorder() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_sourceorder());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BackupChapter::_class_data_ = {
    BackupChapter::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* BackupChapter::GetClassData() const {
  return &_class_data_;
}

void BackupChapter::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BackupChapter*>(&to_msg);
  auto& from = static_cast<const BackupChapter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BackupChapter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_scanlator().empty()) {
    _this->_internal_set_scanlator(from._internal_scanlator());
  }
  if (from._internal_lastpageread() != 0) {
    _this->_internal_set_lastpageread(from._internal_lastpageread());
  }
  if (from._internal_read() != 0) {
    _this->_internal_set_read(from._internal_read());
  }
  if (from._internal_bookmark() != 0) {
    _this->_internal_set_bookmark(from._internal_bookmark());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_chapternumber = from._internal_chapternumber();
  ::uint32_t raw_chapternumber;
  memcpy(&raw_chapternumber, &tmp_chapternumber, sizeof(tmp_chapternumber));
  if (raw_chapternumber != 0) {
    _this->_internal_set_chapternumber(from._internal_chapternumber());
  }
  if (from._internal_datefetch() != 0) {
    _this->_internal_set_datefetch(from._internal_datefetch());
  }
  if (from._internal_dateupload() != 0) {
    _this->_internal_set_dateupload(from._internal_dateupload());
  }
  if (from._internal_sourceorder() != 0) {
    _this->_internal_set_sourceorder(from._internal_sourceorder());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BackupChapter::CopyFrom(const BackupChapter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BackupChapter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BackupChapter::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* BackupChapter::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void BackupChapter::InternalSwap(BackupChapter* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scanlator_, &other->_impl_.scanlator_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.sourceorder_)
      + sizeof(BackupChapter::_impl_.sourceorder_)
      - PROTOBUF_FIELD_OFFSET(BackupChapter, _impl_.lastpageread_)>(
          reinterpret_cast<char*>(&_impl_.lastpageread_),
          reinterpret_cast<char*>(&other->_impl_.lastpageread_));
}

::google::protobuf::Metadata BackupChapter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_backup_5fchapter_2eproto_getter, &descriptor_table_backup_5fchapter_2eproto_once,
      file_level_metadata_backup_5fchapter_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
