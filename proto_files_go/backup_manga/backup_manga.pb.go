// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: backup_manga.proto

package backup_manga

import (
	backup_chapters "github.com/croisen/chiyo-tatsu/proto_files_go/backup_chapters"
	backup_history "github.com/croisen/chiyo-tatsu/proto_files_go/backup_history"
	backup_tracking "github.com/croisen/chiyo-tatsu/proto_files_go/backup_tracking"
	manga_update_strategy "github.com/croisen/chiyo-tatsu/proto_files_go/manga_update_strategy"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BackupManga struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source       int64    `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Url          string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title        string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Artist       *string  `protobuf:"bytes,4,opt,name=artist,proto3,oneof" json:"artist,omitempty"`
	Author       *string  `protobuf:"bytes,5,opt,name=author,proto3,oneof" json:"author,omitempty"`
	Description  *string  `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Genre        []string `protobuf:"bytes,7,rep,name=genre,proto3" json:"genre,omitempty"`
	Status       int32    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	ThumbnailUrl *string  `protobuf:"bytes,9,opt,name=thumbnailUrl,proto3,oneof" json:"thumbnailUrl,omitempty"`
	// Values not used in 0.x but a 1.x value? (Better be optional then) {
	CustomCover *string                           `protobuf:"bytes,10,opt,name=customCover,proto3,oneof" json:"customCover,omitempty"`
	LastUpdate  *int64                            `protobuf:"varint,11,opt,name=lastUpdate,proto3,oneof" json:"lastUpdate,omitempty"`
	LastInit    *int64                            `protobuf:"varint,12,opt,name=lastInit,proto3,oneof" json:"lastInit,omitempty"` // }
	DateAdded   int64                             `protobuf:"varint,13,opt,name=dateAdded,proto3" json:"dateAdded,omitempty"`
	Viewer      int32                             `protobuf:"varint,14,opt,name=viewer,proto3" json:"viewer,omitempty"`
	Flags       *int32                            `protobuf:"varint,15,opt,name=flags,proto3,oneof" json:"flags,omitempty"` // Another 1,x value
	Chapters    []*backup_chapters.BackupChapter  `protobuf:"bytes,16,rep,name=chapters,proto3" json:"chapters,omitempty"`
	Categories  []int64                           `protobuf:"varint,17,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	Tracking    []*backup_tracking.BackupTracking `protobuf:"bytes,18,rep,name=tracking,proto3" json:"tracking,omitempty"`
	// Another case of not being nullable but doesn't exist on my backup
	Favorite      *bool                                 `protobuf:"varint,100,opt,name=favorite,proto3,oneof" json:"favorite,omitempty"`
	ChapterFlags  *int32                                `protobuf:"varint,101,opt,name=chapterFlags,proto3,oneof" json:"chapterFlags,omitempty"`
	BrokenHistory []*backup_history.BrokenBackupHistory `protobuf:"bytes,102,rep,name=brokenHistory,proto3" json:"brokenHistory,omitempty"`
	ViewerFlags   *int32                                `protobuf:"varint,103,opt,name=viewer_flags,json=viewerFlags,proto3,oneof" json:"viewer_flags,omitempty"`
	History       []*backup_history.BackupHistory       `protobuf:"bytes,104,rep,name=history,proto3" json:"history,omitempty"`
	// Another case of not being nullable but doesn't exist on my backup
	UpdateStrategy     manga_update_strategy.UpdateStrategy `protobuf:"varint,105,opt,name=updateStrategy,proto3,enum=tachiyomi_manga_update_strategy.UpdateStrategy" json:"updateStrategy,omitempty"`
	LastModifiedAt     int64                                `protobuf:"varint,106,opt,name=lastModifiedAt,proto3" json:"lastModifiedAt,omitempty"`
	FavoriteModifiedAt *int64                               `protobuf:"varint,107,opt,name=favoriteModifiedAt,proto3,oneof" json:"favoriteModifiedAt,omitempty"`
}

func (x *BackupManga) Reset() {
	*x = BackupManga{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backup_manga_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupManga) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupManga) ProtoMessage() {}

func (x *BackupManga) ProtoReflect() protoreflect.Message {
	mi := &file_backup_manga_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupManga.ProtoReflect.Descriptor instead.
func (*BackupManga) Descriptor() ([]byte, []int) {
	return file_backup_manga_proto_rawDescGZIP(), []int{0}
}

func (x *BackupManga) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *BackupManga) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BackupManga) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BackupManga) GetArtist() string {
	if x != nil && x.Artist != nil {
		return *x.Artist
	}
	return ""
}

func (x *BackupManga) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *BackupManga) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *BackupManga) GetGenre() []string {
	if x != nil {
		return x.Genre
	}
	return nil
}

func (x *BackupManga) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BackupManga) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *BackupManga) GetCustomCover() string {
	if x != nil && x.CustomCover != nil {
		return *x.CustomCover
	}
	return ""
}

func (x *BackupManga) GetLastUpdate() int64 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *BackupManga) GetLastInit() int64 {
	if x != nil && x.LastInit != nil {
		return *x.LastInit
	}
	return 0
}

func (x *BackupManga) GetDateAdded() int64 {
	if x != nil {
		return x.DateAdded
	}
	return 0
}

func (x *BackupManga) GetViewer() int32 {
	if x != nil {
		return x.Viewer
	}
	return 0
}

func (x *BackupManga) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *BackupManga) GetChapters() []*backup_chapters.BackupChapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *BackupManga) GetCategories() []int64 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *BackupManga) GetTracking() []*backup_tracking.BackupTracking {
	if x != nil {
		return x.Tracking
	}
	return nil
}

func (x *BackupManga) GetFavorite() bool {
	if x != nil && x.Favorite != nil {
		return *x.Favorite
	}
	return false
}

func (x *BackupManga) GetChapterFlags() int32 {
	if x != nil && x.ChapterFlags != nil {
		return *x.ChapterFlags
	}
	return 0
}

func (x *BackupManga) GetBrokenHistory() []*backup_history.BrokenBackupHistory {
	if x != nil {
		return x.BrokenHistory
	}
	return nil
}

func (x *BackupManga) GetViewerFlags() int32 {
	if x != nil && x.ViewerFlags != nil {
		return *x.ViewerFlags
	}
	return 0
}

func (x *BackupManga) GetHistory() []*backup_history.BackupHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *BackupManga) GetUpdateStrategy() manga_update_strategy.UpdateStrategy {
	if x != nil {
		return x.UpdateStrategy
	}
	return manga_update_strategy.UpdateStrategy(0)
}

func (x *BackupManga) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *BackupManga) GetFavoriteModifiedAt() int64 {
	if x != nil && x.FavoriteModifiedAt != nil {
		return *x.FavoriteModifiedAt
	}
	return 0
}

var File_backup_manga_proto protoreflect.FileDescriptor

var file_backup_manga_proto_rawDesc = []byte{
	0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f,
	0x6d, 0x61, 0x6e, 0x67, 0x61, 0x1a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x09, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x4d, 0x61, 0x6e, 0x67, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x07, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x66, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0a, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x68, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d, 0x69, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x57, 0x0a,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x79, 0x6f, 0x6d,
	0x69, 0x5f, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33,
	0x0a, 0x12, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x12, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x6f, 0x69, 0x73, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x69,
	0x79, 0x6f, 0x2d, 0x74, 0x61, 0x74, 0x73, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d,
	0x61, 0x6e, 0x67, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backup_manga_proto_rawDescOnce sync.Once
	file_backup_manga_proto_rawDescData = file_backup_manga_proto_rawDesc
)

func file_backup_manga_proto_rawDescGZIP() []byte {
	file_backup_manga_proto_rawDescOnce.Do(func() {
		file_backup_manga_proto_rawDescData = protoimpl.X.CompressGZIP(file_backup_manga_proto_rawDescData)
	})
	return file_backup_manga_proto_rawDescData
}

var file_backup_manga_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_backup_manga_proto_goTypes = []interface{}{
	(*BackupManga)(nil),                        // 0: tachiyomi_manga.BackupManga
	(*backup_chapters.BackupChapter)(nil),      // 1: tachiyomi_chapters.BackupChapter
	(*backup_tracking.BackupTracking)(nil),     // 2: tachiyomi_backup_tracking.BackupTracking
	(*backup_history.BrokenBackupHistory)(nil), // 3: tachiyomi_history.BrokenBackupHistory
	(*backup_history.BackupHistory)(nil),       // 4: tachiyomi_history.BackupHistory
	(manga_update_strategy.UpdateStrategy)(0),  // 5: tachiyomi_manga_update_strategy.UpdateStrategy
}
var file_backup_manga_proto_depIdxs = []int32{
	1, // 0: tachiyomi_manga.BackupManga.chapters:type_name -> tachiyomi_chapters.BackupChapter
	2, // 1: tachiyomi_manga.BackupManga.tracking:type_name -> tachiyomi_backup_tracking.BackupTracking
	3, // 2: tachiyomi_manga.BackupManga.brokenHistory:type_name -> tachiyomi_history.BrokenBackupHistory
	4, // 3: tachiyomi_manga.BackupManga.history:type_name -> tachiyomi_history.BackupHistory
	5, // 4: tachiyomi_manga.BackupManga.updateStrategy:type_name -> tachiyomi_manga_update_strategy.UpdateStrategy
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_backup_manga_proto_init() }
func file_backup_manga_proto_init() {
	if File_backup_manga_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backup_manga_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupManga); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backup_manga_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backup_manga_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_backup_manga_proto_goTypes,
		DependencyIndexes: file_backup_manga_proto_depIdxs,
		MessageInfos:      file_backup_manga_proto_msgTypes,
	}.Build()
	File_backup_manga_proto = out.File
	file_backup_manga_proto_rawDesc = nil
	file_backup_manga_proto_goTypes = nil
	file_backup_manga_proto_depIdxs = nil
}
